Terminals unused in grammar

   ERROR


State 180 conflicts: 1 shift/reduce
State 211 conflicts: 2 shift/reduce
State 236 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: global_decl_list

    2 global_decl_list: global_decl_list global_decl
    3                 | %empty

    4 global_decl: nonfunction_decl
    5            | function_decl

    6 nonfunction_decl: var_decl
    7                 | type_decl

    8 var_decl: LL_type ID OP_ASSIGN init_id_dim_unit MK_SEMICOLON
    9         | LL_type init_id_list MK_SEMICOLON
   10         | STRUCT ID MK_LBRACE struct_block MK_RBRACE MK_SEMICOLON
   11         | HL_type init_id_list MK_SEMICOLON
   12         | ID ID OP_ASSIGN init_id_dim_unit MK_SEMICOLON
   13         | ID init_id_list MK_SEMICOLON

   14 LL_type: INT
   15        | FLOAT

   16 HL_type: struct_type

   17 init_id_list: init_id_list MK_COMMA init_id_unit
   18             | init_id_unit

   19 init_id_unit: ID init_id_dim_list
   20             | ID

   21 init_id_dim_list: init_id_dim_list MK_LB init_id_dim_unit MK_RB
   22                 | MK_LB init_id_dim_unit MK_RB

   23 init_id_dim_unit: init_id_dim_unit OP_OR init_expr_1
   24                 | init_expr_1

   25 init_expr_1: init_expr_1 OP_AND init_expr_2
   26            | init_expr_2

   27 init_expr_2: init_expr_2 logic_op2 init_expr_3
   28            | init_expr_3

   29 init_expr_3: init_expr_3 logic_op3 init_expr_4
   30            | init_expr_4

   31 init_expr_4: init_expr_4 add_op init_expr_5
   32            | init_expr_5
   33            | OP_MINUS init_expr_5

   34 init_expr_5: init_expr_5 mul_op init_expr_6
   35            | init_expr_6

   36 init_expr_6: OP_NOT init_expr_7
   37            | init_expr_7

   38 init_expr_7: MK_LPAREN init_id_dim_unit MK_RPAREN
   39            | CONST

   40 struct_type: STRUCT ID
   41            | STRUCT ID MK_LBRACE struct_block MK_RBRACE
   42            | STRUCT MK_LBRACE struct_block MK_RBRACE

   43 struct_block: struct_block struct_block_unit MK_SEMICOLON
   44             | struct_block_unit MK_SEMICOLON

   45 struct_block_unit: LL_type init_id_list
   46                  | HL_type init_id_list
   47                  | ID init_id_list

   48 type_decl: TYPEDEF LL_type init_id_list MK_SEMICOLON
   49          | TYPEDEF struct_type init_id_list MK_SEMICOLON

   50 function_decl: LL_type ID MK_LPAREN func_param_list MK_RPAREN MK_SEMICOLON
   51              | LL_type ID MK_LPAREN MK_RPAREN MK_SEMICOLON
   52              | LL_type ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   53              | LL_type ID MK_LPAREN MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   54              | LL_type ID MK_LPAREN MK_RPAREN MK_LBRACE MK_RBRACE
   55              | VOID ID MK_LPAREN func_param_list MK_RPAREN MK_SEMICOLON
   56              | VOID ID MK_LPAREN MK_RPAREN MK_SEMICOLON
   57              | VOID ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   58              | VOID ID MK_LPAREN MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   59              | VOID ID MK_LPAREN MK_RPAREN MK_LBRACE MK_RBRACE

   60 func_param_list: func_param_list MK_COMMA func_param_unit
   61                | func_param_unit

   62 func_param_unit: LL_type ID func_param_dim_list
   63                | LL_type ID

   64 func_param_dim_list: func_param_dim_list_other MK_LB init_id_dim_unit MK_RB
   65                    | MK_LB init_id_dim_unit MK_RB

   66 func_param_dim_list_other: func_param_dim_list_other MK_LB init_id_dim_unit MK_RB
   67                          | func_param_dim_list_other MK_LB MK_RB
   68                          | MK_LB init_id_dim_unit MK_RB
   69                          | MK_LB MK_RB

   70 func_stmts: func_stmts func_stmt
   71           | func_stmt

   72 func_stmt: nonfunction_decl
   73          | return_stmt
   74          | assign_stmt MK_SEMICOLON
   75          | func_call MK_SEMICOLON
   76          | contr_stmt
   77          | loop_stmt

   78 return_stmt: RETURN MK_SEMICOLON
   79            | RETURN expr MK_SEMICOLON

   80 assign_stmt: var_ref OP_ASSIGN expr

   81 func_call: ID MK_LPAREN func_call_param MK_RPAREN
   82          | ID MK_LPAREN MK_RPAREN

   83 func_call_param: func_call_param MK_COMMA expr
   84                | expr

   85 contr_stmt: IF MK_LPAREN if_block MK_RPAREN contr_block
   86           | IF MK_LPAREN if_block MK_RPAREN contr_block ELSE contr_block

   87 if_block: expr
   88         | assign_stmt

   89 contr_block: func_stmt
   90            | MK_LBRACE func_stmts MK_RBRACE

   91 loop_stmt: FOR MK_LPAREN for_block MK_SEMICOLON for_block MK_SEMICOLON for_block MK_RPAREN contr_block
   92          | WHILE MK_LPAREN if_block MK_RPAREN MK_LBRACE func_stmts MK_RBRACE

   93 for_block: expr
   94          | assign_stmt
   95          | %empty

   96 var_ref: ID
   97        | var_ref id_dim_list
   98        | var_ref MK_DOT var_ref

   99 id_dim_list: id_dim_list MK_LB expr MK_RB
  100            | MK_LB expr MK_RB

  101 add_op: OP_PLUS
  102       | OP_MINUS

  103 mul_op: OP_TIMES
  104       | OP_DIVIDE

  105 logic_op2: OP_EQ
  106          | OP_NE

  107 logic_op3: OP_LE
  108          | OP_GE
  109          | OP_LT
  110          | OP_GT

  111 expr: expr OP_OR expr_1
  112     | expr_1

  113 expr_1: expr_1 OP_AND expr_2
  114       | expr_2

  115 expr_2: expr_2 logic_op2 expr_3
  116       | expr_3

  117 expr_3: expr_3 logic_op3 expr_4
  118       | expr_4

  119 expr_4: expr_4 add_op expr_5
  120       | expr_5
  121       | OP_MINUS expr_5

  122 expr_5: expr_5 mul_op expr_6
  123       | expr_6

  124 expr_6: OP_NOT expr_7
  125       | expr_7

  126 expr_7: MK_LPAREN expr MK_RPAREN
  127       | var_ref
  128       | CONST
  129       | func_call


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 8 10 12 13 19 20 40 41 47 50 51 52 53 54 55 56 57 58 59 62
    63 81 82 96
CONST (259) 39 128
VOID (260) 55 56 57 58 59
INT (261) 14
FLOAT (262) 15
IF (263) 85 86
ELSE (264) 86
WHILE (265) 92
FOR (266) 91
STRUCT (267) 10 40 41 42
TYPEDEF (268) 48 49
OP_ASSIGN (269) 8 12 80
OP_OR (270) 23 111
OP_AND (271) 25 113
OP_NOT (272) 36 124
OP_EQ (273) 105
OP_NE (274) 106
OP_GT (275) 110
OP_LT (276) 109
OP_GE (277) 108
OP_LE (278) 107
OP_PLUS (279) 101
OP_MINUS (280) 33 102 121
OP_TIMES (281) 103
OP_DIVIDE (282) 104
MK_LB (283) 21 22 64 65 66 67 68 69 99 100
MK_RB (284) 21 22 64 65 66 67 68 69 99 100
MK_LPAREN (285) 38 50 51 52 53 54 55 56 57 58 59 81 82 85 86 91 92
    126
MK_RPAREN (286) 38 50 51 52 53 54 55 56 57 58 59 81 82 85 86 91 92
    126
MK_LBRACE (287) 10 41 42 52 53 54 57 58 59 90 92
MK_RBRACE (288) 10 41 42 52 53 54 57 58 59 90 92
MK_COMMA (289) 17 60 83
MK_SEMICOLON (290) 8 9 10 11 12 13 43 44 48 49 50 51 55 56 74 75 78
    79 91
MK_DOT (291) 98
ERROR (292)
RETURN (293) 78 79


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
program (40)
    on left: 1, on right: 0
global_decl_list (41)
    on left: 2 3, on right: 1 2
global_decl (42)
    on left: 4 5, on right: 2
nonfunction_decl (43)
    on left: 6 7, on right: 4 72
var_decl (44)
    on left: 8 9 10 11 12 13, on right: 6
LL_type (45)
    on left: 14 15, on right: 8 9 45 48 50 51 52 53 54 62 63
HL_type (46)
    on left: 16, on right: 11 46
init_id_list (47)
    on left: 17 18, on right: 9 11 13 17 45 46 47 48 49
init_id_unit (48)
    on left: 19 20, on right: 17 18
init_id_dim_list (49)
    on left: 21 22, on right: 19 21
init_id_dim_unit (50)
    on left: 23 24, on right: 8 12 21 22 23 38 64 65 66 68
init_expr_1 (51)
    on left: 25 26, on right: 23 24 25
init_expr_2 (52)
    on left: 27 28, on right: 25 26 27
init_expr_3 (53)
    on left: 29 30, on right: 27 28 29
init_expr_4 (54)
    on left: 31 32 33, on right: 29 30 31
init_expr_5 (55)
    on left: 34 35, on right: 31 32 33 34
init_expr_6 (56)
    on left: 36 37, on right: 34 35
init_expr_7 (57)
    on left: 38 39, on right: 36 37
struct_type (58)
    on left: 40 41 42, on right: 16 49
struct_block (59)
    on left: 43 44, on right: 10 41 42 43
struct_block_unit (60)
    on left: 45 46 47, on right: 43 44
type_decl (61)
    on left: 48 49, on right: 7
function_decl (62)
    on left: 50 51 52 53 54 55 56 57 58 59, on right: 5
func_param_list (63)
    on left: 60 61, on right: 50 52 55 57 60
func_param_unit (64)
    on left: 62 63, on right: 60 61
func_param_dim_list (65)
    on left: 64 65, on right: 62
func_param_dim_list_other (66)
    on left: 66 67 68 69, on right: 64 66 67
func_stmts (67)
    on left: 70 71, on right: 52 53 57 58 70 90 92
func_stmt (68)
    on left: 72 73 74 75 76 77, on right: 70 71 89
return_stmt (69)
    on left: 78 79, on right: 73
assign_stmt (70)
    on left: 80, on right: 74 88 94
func_call (71)
    on left: 81 82, on right: 75 129
func_call_param (72)
    on left: 83 84, on right: 81 83
contr_stmt (73)
    on left: 85 86, on right: 76
if_block (74)
    on left: 87 88, on right: 85 86 92
contr_block (75)
    on left: 89 90, on right: 85 86 91
loop_stmt (76)
    on left: 91 92, on right: 77
for_block (77)
    on left: 93 94 95, on right: 91
var_ref (78)
    on left: 96 97 98, on right: 80 97 98 127
id_dim_list (79)
    on left: 99 100, on right: 97 99
add_op (80)
    on left: 101 102, on right: 31 119
mul_op (81)
    on left: 103 104, on right: 34 122
logic_op2 (82)
    on left: 105 106, on right: 27 115
logic_op3 (83)
    on left: 107 108 109 110, on right: 29 117
expr (84)
    on left: 111 112, on right: 79 80 83 84 87 93 99 100 111 126
expr_1 (85)
    on left: 113 114, on right: 111 112 113
expr_2 (86)
    on left: 115 116, on right: 113 114 115
expr_3 (87)
    on left: 117 118, on right: 115 116 117
expr_4 (88)
    on left: 119 120 121, on right: 117 118 119
expr_5 (89)
    on left: 122 123, on right: 119 120 121 122
expr_6 (90)
    on left: 124 125, on right: 122 123
expr_7 (91)
    on left: 126 127 128 129, on right: 124 125


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (global_decl_list)

    program           go to state 1
    global_decl_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: global_decl_list .
    2 global_decl_list: global_decl_list . global_decl

    ID       shift, and go to state 4
    VOID     shift, and go to state 5
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    STRUCT   shift, and go to state 8
    TYPEDEF  shift, and go to state 9

    $default  reduce using rule 1 (program)

    global_decl       go to state 10
    nonfunction_decl  go to state 11
    var_decl          go to state 12
    LL_type           go to state 13
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    function_decl     go to state 17


State 3

    0 $accept: program $end .

    $default  accept


State 4

   12 var_decl: ID . ID OP_ASSIGN init_id_dim_unit MK_SEMICOLON
   13         | ID . init_id_list MK_SEMICOLON

    ID  shift, and go to state 18

    init_id_list  go to state 19
    init_id_unit  go to state 20


State 5

   55 function_decl: VOID . ID MK_LPAREN func_param_list MK_RPAREN MK_SEMICOLON
   56              | VOID . ID MK_LPAREN MK_RPAREN MK_SEMICOLON
   57              | VOID . ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   58              | VOID . ID MK_LPAREN MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   59              | VOID . ID MK_LPAREN MK_RPAREN MK_LBRACE MK_RBRACE

    ID  shift, and go to state 21


State 6

   14 LL_type: INT .

    $default  reduce using rule 14 (LL_type)


State 7

   15 LL_type: FLOAT .

    $default  reduce using rule 15 (LL_type)


State 8

   10 var_decl: STRUCT . ID MK_LBRACE struct_block MK_RBRACE MK_SEMICOLON
   40 struct_type: STRUCT . ID
   41            | STRUCT . ID MK_LBRACE struct_block MK_RBRACE
   42            | STRUCT . MK_LBRACE struct_block MK_RBRACE

    ID         shift, and go to state 22
    MK_LBRACE  shift, and go to state 23


State 9

   48 type_decl: TYPEDEF . LL_type init_id_list MK_SEMICOLON
   49          | TYPEDEF . struct_type init_id_list MK_SEMICOLON

    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    STRUCT  shift, and go to state 24

    LL_type      go to state 25
    struct_type  go to state 26


State 10

    2 global_decl_list: global_decl_list global_decl .

    $default  reduce using rule 2 (global_decl_list)


State 11

    4 global_decl: nonfunction_decl .

    $default  reduce using rule 4 (global_decl)


State 12

    6 nonfunction_decl: var_decl .

    $default  reduce using rule 6 (nonfunction_decl)


State 13

    8 var_decl: LL_type . ID OP_ASSIGN init_id_dim_unit MK_SEMICOLON
    9         | LL_type . init_id_list MK_SEMICOLON
   50 function_decl: LL_type . ID MK_LPAREN func_param_list MK_RPAREN MK_SEMICOLON
   51              | LL_type . ID MK_LPAREN MK_RPAREN MK_SEMICOLON
   52              | LL_type . ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   53              | LL_type . ID MK_LPAREN MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   54              | LL_type . ID MK_LPAREN MK_RPAREN MK_LBRACE MK_RBRACE

    ID  shift, and go to state 27

    init_id_list  go to state 28
    init_id_unit  go to state 20


State 14

   11 var_decl: HL_type . init_id_list MK_SEMICOLON

    ID  shift, and go to state 29

    init_id_list  go to state 30
    init_id_unit  go to state 20


State 15

   16 HL_type: struct_type .

    $default  reduce using rule 16 (HL_type)


State 16

    7 nonfunction_decl: type_decl .

    $default  reduce using rule 7 (nonfunction_decl)


State 17

    5 global_decl: function_decl .

    $default  reduce using rule 5 (global_decl)


State 18

   12 var_decl: ID ID . OP_ASSIGN init_id_dim_unit MK_SEMICOLON
   19 init_id_unit: ID . init_id_dim_list
   20             | ID .

    OP_ASSIGN  shift, and go to state 31
    MK_LB      shift, and go to state 32

    $default  reduce using rule 20 (init_id_unit)

    init_id_dim_list  go to state 33


State 19

   13 var_decl: ID init_id_list . MK_SEMICOLON
   17 init_id_list: init_id_list . MK_COMMA init_id_unit

    MK_COMMA      shift, and go to state 34
    MK_SEMICOLON  shift, and go to state 35


State 20

   18 init_id_list: init_id_unit .

    $default  reduce using rule 18 (init_id_list)


State 21

   55 function_decl: VOID ID . MK_LPAREN func_param_list MK_RPAREN MK_SEMICOLON
   56              | VOID ID . MK_LPAREN MK_RPAREN MK_SEMICOLON
   57              | VOID ID . MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   58              | VOID ID . MK_LPAREN MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   59              | VOID ID . MK_LPAREN MK_RPAREN MK_LBRACE MK_RBRACE

    MK_LPAREN  shift, and go to state 36


State 22

   10 var_decl: STRUCT ID . MK_LBRACE struct_block MK_RBRACE MK_SEMICOLON
   40 struct_type: STRUCT ID .
   41            | STRUCT ID . MK_LBRACE struct_block MK_RBRACE

    MK_LBRACE  shift, and go to state 37

    $default  reduce using rule 40 (struct_type)


State 23

   42 struct_type: STRUCT MK_LBRACE . struct_block MK_RBRACE

    ID      shift, and go to state 38
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    STRUCT  shift, and go to state 24

    LL_type            go to state 39
    HL_type            go to state 40
    struct_type        go to state 15
    struct_block       go to state 41
    struct_block_unit  go to state 42


State 24

   40 struct_type: STRUCT . ID
   41            | STRUCT . ID MK_LBRACE struct_block MK_RBRACE
   42            | STRUCT . MK_LBRACE struct_block MK_RBRACE

    ID         shift, and go to state 43
    MK_LBRACE  shift, and go to state 23


State 25

   48 type_decl: TYPEDEF LL_type . init_id_list MK_SEMICOLON

    ID  shift, and go to state 29

    init_id_list  go to state 44
    init_id_unit  go to state 20


State 26

   49 type_decl: TYPEDEF struct_type . init_id_list MK_SEMICOLON

    ID  shift, and go to state 29

    init_id_list  go to state 45
    init_id_unit  go to state 20


State 27

    8 var_decl: LL_type ID . OP_ASSIGN init_id_dim_unit MK_SEMICOLON
   19 init_id_unit: ID . init_id_dim_list
   20             | ID .
   50 function_decl: LL_type ID . MK_LPAREN func_param_list MK_RPAREN MK_SEMICOLON
   51              | LL_type ID . MK_LPAREN MK_RPAREN MK_SEMICOLON
   52              | LL_type ID . MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   53              | LL_type ID . MK_LPAREN MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   54              | LL_type ID . MK_LPAREN MK_RPAREN MK_LBRACE MK_RBRACE

    OP_ASSIGN  shift, and go to state 46
    MK_LB      shift, and go to state 32
    MK_LPAREN  shift, and go to state 47

    $default  reduce using rule 20 (init_id_unit)

    init_id_dim_list  go to state 33


State 28

    9 var_decl: LL_type init_id_list . MK_SEMICOLON
   17 init_id_list: init_id_list . MK_COMMA init_id_unit

    MK_COMMA      shift, and go to state 34
    MK_SEMICOLON  shift, and go to state 48


State 29

   19 init_id_unit: ID . init_id_dim_list
   20             | ID .

    MK_LB  shift, and go to state 32

    $default  reduce using rule 20 (init_id_unit)

    init_id_dim_list  go to state 33


State 30

   11 var_decl: HL_type init_id_list . MK_SEMICOLON
   17 init_id_list: init_id_list . MK_COMMA init_id_unit

    MK_COMMA      shift, and go to state 34
    MK_SEMICOLON  shift, and go to state 49


State 31

   12 var_decl: ID ID OP_ASSIGN . init_id_dim_unit MK_SEMICOLON

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    init_id_dim_unit  go to state 54
    init_expr_1       go to state 55
    init_expr_2       go to state 56
    init_expr_3       go to state 57
    init_expr_4       go to state 58
    init_expr_5       go to state 59
    init_expr_6       go to state 60
    init_expr_7       go to state 61


State 32

   22 init_id_dim_list: MK_LB . init_id_dim_unit MK_RB

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    init_id_dim_unit  go to state 62
    init_expr_1       go to state 55
    init_expr_2       go to state 56
    init_expr_3       go to state 57
    init_expr_4       go to state 58
    init_expr_5       go to state 59
    init_expr_6       go to state 60
    init_expr_7       go to state 61


State 33

   19 init_id_unit: ID init_id_dim_list .
   21 init_id_dim_list: init_id_dim_list . MK_LB init_id_dim_unit MK_RB

    MK_LB  shift, and go to state 63

    $default  reduce using rule 19 (init_id_unit)


State 34

   17 init_id_list: init_id_list MK_COMMA . init_id_unit

    ID  shift, and go to state 29

    init_id_unit  go to state 64


State 35

   13 var_decl: ID init_id_list MK_SEMICOLON .

    $default  reduce using rule 13 (var_decl)


State 36

   55 function_decl: VOID ID MK_LPAREN . func_param_list MK_RPAREN MK_SEMICOLON
   56              | VOID ID MK_LPAREN . MK_RPAREN MK_SEMICOLON
   57              | VOID ID MK_LPAREN . func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   58              | VOID ID MK_LPAREN . MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   59              | VOID ID MK_LPAREN . MK_RPAREN MK_LBRACE MK_RBRACE

    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    MK_RPAREN  shift, and go to state 65

    LL_type          go to state 66
    func_param_list  go to state 67
    func_param_unit  go to state 68


State 37

   10 var_decl: STRUCT ID MK_LBRACE . struct_block MK_RBRACE MK_SEMICOLON
   41 struct_type: STRUCT ID MK_LBRACE . struct_block MK_RBRACE

    ID      shift, and go to state 38
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    STRUCT  shift, and go to state 24

    LL_type            go to state 39
    HL_type            go to state 40
    struct_type        go to state 15
    struct_block       go to state 69
    struct_block_unit  go to state 42


State 38

   47 struct_block_unit: ID . init_id_list

    ID  shift, and go to state 29

    init_id_list  go to state 70
    init_id_unit  go to state 20


State 39

   45 struct_block_unit: LL_type . init_id_list

    ID  shift, and go to state 29

    init_id_list  go to state 71
    init_id_unit  go to state 20


State 40

   46 struct_block_unit: HL_type . init_id_list

    ID  shift, and go to state 29

    init_id_list  go to state 72
    init_id_unit  go to state 20


State 41

   42 struct_type: STRUCT MK_LBRACE struct_block . MK_RBRACE
   43 struct_block: struct_block . struct_block_unit MK_SEMICOLON

    ID         shift, and go to state 38
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    STRUCT     shift, and go to state 24
    MK_RBRACE  shift, and go to state 73

    LL_type            go to state 39
    HL_type            go to state 40
    struct_type        go to state 15
    struct_block_unit  go to state 74


State 42

   44 struct_block: struct_block_unit . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 75


State 43

   40 struct_type: STRUCT ID .
   41            | STRUCT ID . MK_LBRACE struct_block MK_RBRACE

    MK_LBRACE  shift, and go to state 76

    $default  reduce using rule 40 (struct_type)


State 44

   17 init_id_list: init_id_list . MK_COMMA init_id_unit
   48 type_decl: TYPEDEF LL_type init_id_list . MK_SEMICOLON

    MK_COMMA      shift, and go to state 34
    MK_SEMICOLON  shift, and go to state 77


State 45

   17 init_id_list: init_id_list . MK_COMMA init_id_unit
   49 type_decl: TYPEDEF struct_type init_id_list . MK_SEMICOLON

    MK_COMMA      shift, and go to state 34
    MK_SEMICOLON  shift, and go to state 78


State 46

    8 var_decl: LL_type ID OP_ASSIGN . init_id_dim_unit MK_SEMICOLON

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    init_id_dim_unit  go to state 79
    init_expr_1       go to state 55
    init_expr_2       go to state 56
    init_expr_3       go to state 57
    init_expr_4       go to state 58
    init_expr_5       go to state 59
    init_expr_6       go to state 60
    init_expr_7       go to state 61


State 47

   50 function_decl: LL_type ID MK_LPAREN . func_param_list MK_RPAREN MK_SEMICOLON
   51              | LL_type ID MK_LPAREN . MK_RPAREN MK_SEMICOLON
   52              | LL_type ID MK_LPAREN . func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   53              | LL_type ID MK_LPAREN . MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   54              | LL_type ID MK_LPAREN . MK_RPAREN MK_LBRACE MK_RBRACE

    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    MK_RPAREN  shift, and go to state 80

    LL_type          go to state 66
    func_param_list  go to state 81
    func_param_unit  go to state 68


State 48

    9 var_decl: LL_type init_id_list MK_SEMICOLON .

    $default  reduce using rule 9 (var_decl)


State 49

   11 var_decl: HL_type init_id_list MK_SEMICOLON .

    $default  reduce using rule 11 (var_decl)


State 50

   39 init_expr_7: CONST .

    $default  reduce using rule 39 (init_expr_7)


State 51

   36 init_expr_6: OP_NOT . init_expr_7

    CONST      shift, and go to state 50
    MK_LPAREN  shift, and go to state 53

    init_expr_7  go to state 82


State 52

   33 init_expr_4: OP_MINUS . init_expr_5

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    MK_LPAREN  shift, and go to state 53

    init_expr_5  go to state 83
    init_expr_6  go to state 60
    init_expr_7  go to state 61


State 53

   38 init_expr_7: MK_LPAREN . init_id_dim_unit MK_RPAREN

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    init_id_dim_unit  go to state 84
    init_expr_1       go to state 55
    init_expr_2       go to state 56
    init_expr_3       go to state 57
    init_expr_4       go to state 58
    init_expr_5       go to state 59
    init_expr_6       go to state 60
    init_expr_7       go to state 61


State 54

   12 var_decl: ID ID OP_ASSIGN init_id_dim_unit . MK_SEMICOLON
   23 init_id_dim_unit: init_id_dim_unit . OP_OR init_expr_1

    OP_OR         shift, and go to state 85
    MK_SEMICOLON  shift, and go to state 86


State 55

   24 init_id_dim_unit: init_expr_1 .
   25 init_expr_1: init_expr_1 . OP_AND init_expr_2

    OP_AND  shift, and go to state 87

    $default  reduce using rule 24 (init_id_dim_unit)


State 56

   26 init_expr_1: init_expr_2 .
   27 init_expr_2: init_expr_2 . logic_op2 init_expr_3

    OP_EQ  shift, and go to state 88
    OP_NE  shift, and go to state 89

    $default  reduce using rule 26 (init_expr_1)

    logic_op2  go to state 90


State 57

   28 init_expr_2: init_expr_3 .
   29 init_expr_3: init_expr_3 . logic_op3 init_expr_4

    OP_GT  shift, and go to state 91
    OP_LT  shift, and go to state 92
    OP_GE  shift, and go to state 93
    OP_LE  shift, and go to state 94

    $default  reduce using rule 28 (init_expr_2)

    logic_op3  go to state 95


State 58

   30 init_expr_3: init_expr_4 .
   31 init_expr_4: init_expr_4 . add_op init_expr_5

    OP_PLUS   shift, and go to state 96
    OP_MINUS  shift, and go to state 97

    $default  reduce using rule 30 (init_expr_3)

    add_op  go to state 98


State 59

   32 init_expr_4: init_expr_5 .
   34 init_expr_5: init_expr_5 . mul_op init_expr_6

    OP_TIMES   shift, and go to state 99
    OP_DIVIDE  shift, and go to state 100

    $default  reduce using rule 32 (init_expr_4)

    mul_op  go to state 101


State 60

   35 init_expr_5: init_expr_6 .

    $default  reduce using rule 35 (init_expr_5)


State 61

   37 init_expr_6: init_expr_7 .

    $default  reduce using rule 37 (init_expr_6)


State 62

   22 init_id_dim_list: MK_LB init_id_dim_unit . MK_RB
   23 init_id_dim_unit: init_id_dim_unit . OP_OR init_expr_1

    OP_OR  shift, and go to state 85
    MK_RB  shift, and go to state 102


State 63

   21 init_id_dim_list: init_id_dim_list MK_LB . init_id_dim_unit MK_RB

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    init_id_dim_unit  go to state 103
    init_expr_1       go to state 55
    init_expr_2       go to state 56
    init_expr_3       go to state 57
    init_expr_4       go to state 58
    init_expr_5       go to state 59
    init_expr_6       go to state 60
    init_expr_7       go to state 61


State 64

   17 init_id_list: init_id_list MK_COMMA init_id_unit .

    $default  reduce using rule 17 (init_id_list)


State 65

   56 function_decl: VOID ID MK_LPAREN MK_RPAREN . MK_SEMICOLON
   58              | VOID ID MK_LPAREN MK_RPAREN . MK_LBRACE func_stmts MK_RBRACE
   59              | VOID ID MK_LPAREN MK_RPAREN . MK_LBRACE MK_RBRACE

    MK_LBRACE     shift, and go to state 104
    MK_SEMICOLON  shift, and go to state 105


State 66

   62 func_param_unit: LL_type . ID func_param_dim_list
   63                | LL_type . ID

    ID  shift, and go to state 106


State 67

   55 function_decl: VOID ID MK_LPAREN func_param_list . MK_RPAREN MK_SEMICOLON
   57              | VOID ID MK_LPAREN func_param_list . MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   60 func_param_list: func_param_list . MK_COMMA func_param_unit

    MK_RPAREN  shift, and go to state 107
    MK_COMMA   shift, and go to state 108


State 68

   61 func_param_list: func_param_unit .

    $default  reduce using rule 61 (func_param_list)


State 69

   10 var_decl: STRUCT ID MK_LBRACE struct_block . MK_RBRACE MK_SEMICOLON
   41 struct_type: STRUCT ID MK_LBRACE struct_block . MK_RBRACE
   43 struct_block: struct_block . struct_block_unit MK_SEMICOLON

    ID         shift, and go to state 38
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    STRUCT     shift, and go to state 24
    MK_RBRACE  shift, and go to state 109

    LL_type            go to state 39
    HL_type            go to state 40
    struct_type        go to state 15
    struct_block_unit  go to state 74


State 70

   17 init_id_list: init_id_list . MK_COMMA init_id_unit
   47 struct_block_unit: ID init_id_list .

    MK_COMMA  shift, and go to state 34

    $default  reduce using rule 47 (struct_block_unit)


State 71

   17 init_id_list: init_id_list . MK_COMMA init_id_unit
   45 struct_block_unit: LL_type init_id_list .

    MK_COMMA  shift, and go to state 34

    $default  reduce using rule 45 (struct_block_unit)


State 72

   17 init_id_list: init_id_list . MK_COMMA init_id_unit
   46 struct_block_unit: HL_type init_id_list .

    MK_COMMA  shift, and go to state 34

    $default  reduce using rule 46 (struct_block_unit)


State 73

   42 struct_type: STRUCT MK_LBRACE struct_block MK_RBRACE .

    $default  reduce using rule 42 (struct_type)


State 74

   43 struct_block: struct_block struct_block_unit . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 110


State 75

   44 struct_block: struct_block_unit MK_SEMICOLON .

    $default  reduce using rule 44 (struct_block)


State 76

   41 struct_type: STRUCT ID MK_LBRACE . struct_block MK_RBRACE

    ID      shift, and go to state 38
    INT     shift, and go to state 6
    FLOAT   shift, and go to state 7
    STRUCT  shift, and go to state 24

    LL_type            go to state 39
    HL_type            go to state 40
    struct_type        go to state 15
    struct_block       go to state 111
    struct_block_unit  go to state 42


State 77

   48 type_decl: TYPEDEF LL_type init_id_list MK_SEMICOLON .

    $default  reduce using rule 48 (type_decl)


State 78

   49 type_decl: TYPEDEF struct_type init_id_list MK_SEMICOLON .

    $default  reduce using rule 49 (type_decl)


State 79

    8 var_decl: LL_type ID OP_ASSIGN init_id_dim_unit . MK_SEMICOLON
   23 init_id_dim_unit: init_id_dim_unit . OP_OR init_expr_1

    OP_OR         shift, and go to state 85
    MK_SEMICOLON  shift, and go to state 112


State 80

   51 function_decl: LL_type ID MK_LPAREN MK_RPAREN . MK_SEMICOLON
   53              | LL_type ID MK_LPAREN MK_RPAREN . MK_LBRACE func_stmts MK_RBRACE
   54              | LL_type ID MK_LPAREN MK_RPAREN . MK_LBRACE MK_RBRACE

    MK_LBRACE     shift, and go to state 113
    MK_SEMICOLON  shift, and go to state 114


State 81

   50 function_decl: LL_type ID MK_LPAREN func_param_list . MK_RPAREN MK_SEMICOLON
   52              | LL_type ID MK_LPAREN func_param_list . MK_RPAREN MK_LBRACE func_stmts MK_RBRACE
   60 func_param_list: func_param_list . MK_COMMA func_param_unit

    MK_RPAREN  shift, and go to state 115
    MK_COMMA   shift, and go to state 108


State 82

   36 init_expr_6: OP_NOT init_expr_7 .

    $default  reduce using rule 36 (init_expr_6)


State 83

   33 init_expr_4: OP_MINUS init_expr_5 .
   34 init_expr_5: init_expr_5 . mul_op init_expr_6

    OP_TIMES   shift, and go to state 99
    OP_DIVIDE  shift, and go to state 100

    $default  reduce using rule 33 (init_expr_4)

    mul_op  go to state 101


State 84

   23 init_id_dim_unit: init_id_dim_unit . OP_OR init_expr_1
   38 init_expr_7: MK_LPAREN init_id_dim_unit . MK_RPAREN

    OP_OR      shift, and go to state 85
    MK_RPAREN  shift, and go to state 116


State 85

   23 init_id_dim_unit: init_id_dim_unit OP_OR . init_expr_1

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    init_expr_1  go to state 117
    init_expr_2  go to state 56
    init_expr_3  go to state 57
    init_expr_4  go to state 58
    init_expr_5  go to state 59
    init_expr_6  go to state 60
    init_expr_7  go to state 61


State 86

   12 var_decl: ID ID OP_ASSIGN init_id_dim_unit MK_SEMICOLON .

    $default  reduce using rule 12 (var_decl)


State 87

   25 init_expr_1: init_expr_1 OP_AND . init_expr_2

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    init_expr_2  go to state 118
    init_expr_3  go to state 57
    init_expr_4  go to state 58
    init_expr_5  go to state 59
    init_expr_6  go to state 60
    init_expr_7  go to state 61


State 88

  105 logic_op2: OP_EQ .

    $default  reduce using rule 105 (logic_op2)


State 89

  106 logic_op2: OP_NE .

    $default  reduce using rule 106 (logic_op2)


State 90

   27 init_expr_2: init_expr_2 logic_op2 . init_expr_3

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    init_expr_3  go to state 119
    init_expr_4  go to state 58
    init_expr_5  go to state 59
    init_expr_6  go to state 60
    init_expr_7  go to state 61


State 91

  110 logic_op3: OP_GT .

    $default  reduce using rule 110 (logic_op3)


State 92

  109 logic_op3: OP_LT .

    $default  reduce using rule 109 (logic_op3)


State 93

  108 logic_op3: OP_GE .

    $default  reduce using rule 108 (logic_op3)


State 94

  107 logic_op3: OP_LE .

    $default  reduce using rule 107 (logic_op3)


State 95

   29 init_expr_3: init_expr_3 logic_op3 . init_expr_4

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_LPAREN  shift, and go to state 53

    init_expr_4  go to state 120
    init_expr_5  go to state 59
    init_expr_6  go to state 60
    init_expr_7  go to state 61


State 96

  101 add_op: OP_PLUS .

    $default  reduce using rule 101 (add_op)


State 97

  102 add_op: OP_MINUS .

    $default  reduce using rule 102 (add_op)


State 98

   31 init_expr_4: init_expr_4 add_op . init_expr_5

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    MK_LPAREN  shift, and go to state 53

    init_expr_5  go to state 121
    init_expr_6  go to state 60
    init_expr_7  go to state 61


State 99

  103 mul_op: OP_TIMES .

    $default  reduce using rule 103 (mul_op)


State 100

  104 mul_op: OP_DIVIDE .

    $default  reduce using rule 104 (mul_op)


State 101

   34 init_expr_5: init_expr_5 mul_op . init_expr_6

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    MK_LPAREN  shift, and go to state 53

    init_expr_6  go to state 122
    init_expr_7  go to state 61


State 102

   22 init_id_dim_list: MK_LB init_id_dim_unit MK_RB .

    $default  reduce using rule 22 (init_id_dim_list)


State 103

   21 init_id_dim_list: init_id_dim_list MK_LB init_id_dim_unit . MK_RB
   23 init_id_dim_unit: init_id_dim_unit . OP_OR init_expr_1

    OP_OR  shift, and go to state 85
    MK_RB  shift, and go to state 123


State 104

   58 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE . func_stmts MK_RBRACE
   59              | VOID ID MK_LPAREN MK_RPAREN MK_LBRACE . MK_RBRACE

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_RBRACE  shift, and go to state 128
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmts        go to state 132
    func_stmt         go to state 133
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 105

   56 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 56 (function_decl)


State 106

   62 func_param_unit: LL_type ID . func_param_dim_list
   63                | LL_type ID .

    MK_LB  shift, and go to state 140

    $default  reduce using rule 63 (func_param_unit)

    func_param_dim_list        go to state 141
    func_param_dim_list_other  go to state 142


State 107

   55 function_decl: VOID ID MK_LPAREN func_param_list MK_RPAREN . MK_SEMICOLON
   57              | VOID ID MK_LPAREN func_param_list MK_RPAREN . MK_LBRACE func_stmts MK_RBRACE

    MK_LBRACE     shift, and go to state 143
    MK_SEMICOLON  shift, and go to state 144


State 108

   60 func_param_list: func_param_list MK_COMMA . func_param_unit

    INT    shift, and go to state 6
    FLOAT  shift, and go to state 7

    LL_type          go to state 66
    func_param_unit  go to state 145


State 109

   10 var_decl: STRUCT ID MK_LBRACE struct_block MK_RBRACE . MK_SEMICOLON
   41 struct_type: STRUCT ID MK_LBRACE struct_block MK_RBRACE .

    MK_SEMICOLON  shift, and go to state 146

    $default  reduce using rule 41 (struct_type)


State 110

   43 struct_block: struct_block struct_block_unit MK_SEMICOLON .

    $default  reduce using rule 43 (struct_block)


State 111

   41 struct_type: STRUCT ID MK_LBRACE struct_block . MK_RBRACE
   43 struct_block: struct_block . struct_block_unit MK_SEMICOLON

    ID         shift, and go to state 38
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    STRUCT     shift, and go to state 24
    MK_RBRACE  shift, and go to state 147

    LL_type            go to state 39
    HL_type            go to state 40
    struct_type        go to state 15
    struct_block_unit  go to state 74


State 112

    8 var_decl: LL_type ID OP_ASSIGN init_id_dim_unit MK_SEMICOLON .

    $default  reduce using rule 8 (var_decl)


State 113

   53 function_decl: LL_type ID MK_LPAREN MK_RPAREN MK_LBRACE . func_stmts MK_RBRACE
   54              | LL_type ID MK_LPAREN MK_RPAREN MK_LBRACE . MK_RBRACE

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_RBRACE  shift, and go to state 148
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmts        go to state 149
    func_stmt         go to state 133
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 114

   51 function_decl: LL_type ID MK_LPAREN MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 51 (function_decl)


State 115

   50 function_decl: LL_type ID MK_LPAREN func_param_list MK_RPAREN . MK_SEMICOLON
   52              | LL_type ID MK_LPAREN func_param_list MK_RPAREN . MK_LBRACE func_stmts MK_RBRACE

    MK_LBRACE     shift, and go to state 150
    MK_SEMICOLON  shift, and go to state 151


State 116

   38 init_expr_7: MK_LPAREN init_id_dim_unit MK_RPAREN .

    $default  reduce using rule 38 (init_expr_7)


State 117

   23 init_id_dim_unit: init_id_dim_unit OP_OR init_expr_1 .
   25 init_expr_1: init_expr_1 . OP_AND init_expr_2

    OP_AND  shift, and go to state 87

    $default  reduce using rule 23 (init_id_dim_unit)


State 118

   25 init_expr_1: init_expr_1 OP_AND init_expr_2 .
   27 init_expr_2: init_expr_2 . logic_op2 init_expr_3

    OP_EQ  shift, and go to state 88
    OP_NE  shift, and go to state 89

    $default  reduce using rule 25 (init_expr_1)

    logic_op2  go to state 90


State 119

   27 init_expr_2: init_expr_2 logic_op2 init_expr_3 .
   29 init_expr_3: init_expr_3 . logic_op3 init_expr_4

    OP_GT  shift, and go to state 91
    OP_LT  shift, and go to state 92
    OP_GE  shift, and go to state 93
    OP_LE  shift, and go to state 94

    $default  reduce using rule 27 (init_expr_2)

    logic_op3  go to state 95


State 120

   29 init_expr_3: init_expr_3 logic_op3 init_expr_4 .
   31 init_expr_4: init_expr_4 . add_op init_expr_5

    OP_PLUS   shift, and go to state 96
    OP_MINUS  shift, and go to state 97

    $default  reduce using rule 29 (init_expr_3)

    add_op  go to state 98


State 121

   31 init_expr_4: init_expr_4 add_op init_expr_5 .
   34 init_expr_5: init_expr_5 . mul_op init_expr_6

    OP_TIMES   shift, and go to state 99
    OP_DIVIDE  shift, and go to state 100

    $default  reduce using rule 31 (init_expr_4)

    mul_op  go to state 101


State 122

   34 init_expr_5: init_expr_5 mul_op init_expr_6 .

    $default  reduce using rule 34 (init_expr_5)


State 123

   21 init_id_dim_list: init_id_dim_list MK_LB init_id_dim_unit MK_RB .

    $default  reduce using rule 21 (init_id_dim_list)


State 124

   12 var_decl: ID . ID OP_ASSIGN init_id_dim_unit MK_SEMICOLON
   13         | ID . init_id_list MK_SEMICOLON
   81 func_call: ID . MK_LPAREN func_call_param MK_RPAREN
   82          | ID . MK_LPAREN MK_RPAREN
   96 var_ref: ID .

    ID         shift, and go to state 18
    MK_LPAREN  shift, and go to state 152

    $default  reduce using rule 96 (var_ref)

    init_id_list  go to state 19
    init_id_unit  go to state 20


State 125

   85 contr_stmt: IF . MK_LPAREN if_block MK_RPAREN contr_block
   86           | IF . MK_LPAREN if_block MK_RPAREN contr_block ELSE contr_block

    MK_LPAREN  shift, and go to state 153


State 126

   92 loop_stmt: WHILE . MK_LPAREN if_block MK_RPAREN MK_LBRACE func_stmts MK_RBRACE

    MK_LPAREN  shift, and go to state 154


State 127

   91 loop_stmt: FOR . MK_LPAREN for_block MK_SEMICOLON for_block MK_SEMICOLON for_block MK_RPAREN contr_block

    MK_LPAREN  shift, and go to state 155


State 128

   59 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE MK_RBRACE .

    $default  reduce using rule 59 (function_decl)


State 129

   78 return_stmt: RETURN . MK_SEMICOLON
   79            | RETURN . expr MK_SEMICOLON

    ID            shift, and go to state 156
    CONST         shift, and go to state 157
    OP_NOT        shift, and go to state 158
    OP_MINUS      shift, and go to state 159
    MK_LPAREN     shift, and go to state 160
    MK_SEMICOLON  shift, and go to state 161

    func_call  go to state 162
    var_ref    go to state 163
    expr       go to state 164
    expr_1     go to state 165
    expr_2     go to state 166
    expr_3     go to state 167
    expr_4     go to state 168
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 130

   72 func_stmt: nonfunction_decl .

    $default  reduce using rule 72 (func_stmt)


State 131

    8 var_decl: LL_type . ID OP_ASSIGN init_id_dim_unit MK_SEMICOLON
    9         | LL_type . init_id_list MK_SEMICOLON

    ID  shift, and go to state 172

    init_id_list  go to state 28
    init_id_unit  go to state 20


State 132

   58 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE func_stmts . MK_RBRACE
   70 func_stmts: func_stmts . func_stmt

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_RBRACE  shift, and go to state 173
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmt         go to state 174
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 133

   71 func_stmts: func_stmt .

    $default  reduce using rule 71 (func_stmts)


State 134

   73 func_stmt: return_stmt .

    $default  reduce using rule 73 (func_stmt)


State 135

   74 func_stmt: assign_stmt . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 175


State 136

   75 func_stmt: func_call . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 176


State 137

   76 func_stmt: contr_stmt .

    $default  reduce using rule 76 (func_stmt)


State 138

   77 func_stmt: loop_stmt .

    $default  reduce using rule 77 (func_stmt)


State 139

   80 assign_stmt: var_ref . OP_ASSIGN expr
   97 var_ref: var_ref . id_dim_list
   98        | var_ref . MK_DOT var_ref

    OP_ASSIGN  shift, and go to state 177
    MK_LB      shift, and go to state 178
    MK_DOT     shift, and go to state 179

    id_dim_list  go to state 180


State 140

   65 func_param_dim_list: MK_LB . init_id_dim_unit MK_RB
   68 func_param_dim_list_other: MK_LB . init_id_dim_unit MK_RB
   69                          | MK_LB . MK_RB

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_RB      shift, and go to state 181
    MK_LPAREN  shift, and go to state 53

    init_id_dim_unit  go to state 182
    init_expr_1       go to state 55
    init_expr_2       go to state 56
    init_expr_3       go to state 57
    init_expr_4       go to state 58
    init_expr_5       go to state 59
    init_expr_6       go to state 60
    init_expr_7       go to state 61


State 141

   62 func_param_unit: LL_type ID func_param_dim_list .

    $default  reduce using rule 62 (func_param_unit)


State 142

   64 func_param_dim_list: func_param_dim_list_other . MK_LB init_id_dim_unit MK_RB
   66 func_param_dim_list_other: func_param_dim_list_other . MK_LB init_id_dim_unit MK_RB
   67                          | func_param_dim_list_other . MK_LB MK_RB

    MK_LB  shift, and go to state 183


State 143

   57 function_decl: VOID ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE . func_stmts MK_RBRACE

    ID       shift, and go to state 124
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    IF       shift, and go to state 125
    WHILE    shift, and go to state 126
    FOR      shift, and go to state 127
    STRUCT   shift, and go to state 8
    TYPEDEF  shift, and go to state 9
    RETURN   shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmts        go to state 184
    func_stmt         go to state 133
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 144

   55 function_decl: VOID ID MK_LPAREN func_param_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 55 (function_decl)


State 145

   60 func_param_list: func_param_list MK_COMMA func_param_unit .

    $default  reduce using rule 60 (func_param_list)


State 146

   10 var_decl: STRUCT ID MK_LBRACE struct_block MK_RBRACE MK_SEMICOLON .

    $default  reduce using rule 10 (var_decl)


State 147

   41 struct_type: STRUCT ID MK_LBRACE struct_block MK_RBRACE .

    $default  reduce using rule 41 (struct_type)


State 148

   54 function_decl: LL_type ID MK_LPAREN MK_RPAREN MK_LBRACE MK_RBRACE .

    $default  reduce using rule 54 (function_decl)


State 149

   53 function_decl: LL_type ID MK_LPAREN MK_RPAREN MK_LBRACE func_stmts . MK_RBRACE
   70 func_stmts: func_stmts . func_stmt

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_RBRACE  shift, and go to state 185
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmt         go to state 174
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 150

   52 function_decl: LL_type ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE . func_stmts MK_RBRACE

    ID       shift, and go to state 124
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    IF       shift, and go to state 125
    WHILE    shift, and go to state 126
    FOR      shift, and go to state 127
    STRUCT   shift, and go to state 8
    TYPEDEF  shift, and go to state 9
    RETURN   shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmts        go to state 186
    func_stmt         go to state 133
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 151

   50 function_decl: LL_type ID MK_LPAREN func_param_list MK_RPAREN MK_SEMICOLON .

    $default  reduce using rule 50 (function_decl)


State 152

   81 func_call: ID MK_LPAREN . func_call_param MK_RPAREN
   82          | ID MK_LPAREN . MK_RPAREN

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160
    MK_RPAREN  shift, and go to state 187

    func_call        go to state 162
    func_call_param  go to state 188
    var_ref          go to state 163
    expr             go to state 189
    expr_1           go to state 165
    expr_2           go to state 166
    expr_3           go to state 167
    expr_4           go to state 168
    expr_5           go to state 169
    expr_6           go to state 170
    expr_7           go to state 171


State 153

   85 contr_stmt: IF MK_LPAREN . if_block MK_RPAREN contr_block
   86           | IF MK_LPAREN . if_block MK_RPAREN contr_block ELSE contr_block

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    assign_stmt  go to state 190
    func_call    go to state 162
    if_block     go to state 191
    var_ref      go to state 192
    expr         go to state 193
    expr_1       go to state 165
    expr_2       go to state 166
    expr_3       go to state 167
    expr_4       go to state 168
    expr_5       go to state 169
    expr_6       go to state 170
    expr_7       go to state 171


State 154

   92 loop_stmt: WHILE MK_LPAREN . if_block MK_RPAREN MK_LBRACE func_stmts MK_RBRACE

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    assign_stmt  go to state 190
    func_call    go to state 162
    if_block     go to state 194
    var_ref      go to state 192
    expr         go to state 193
    expr_1       go to state 165
    expr_2       go to state 166
    expr_3       go to state 167
    expr_4       go to state 168
    expr_5       go to state 169
    expr_6       go to state 170
    expr_7       go to state 171


State 155

   91 loop_stmt: FOR MK_LPAREN . for_block MK_SEMICOLON for_block MK_SEMICOLON for_block MK_RPAREN contr_block

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    $default  reduce using rule 95 (for_block)

    assign_stmt  go to state 195
    func_call    go to state 162
    for_block    go to state 196
    var_ref      go to state 192
    expr         go to state 197
    expr_1       go to state 165
    expr_2       go to state 166
    expr_3       go to state 167
    expr_4       go to state 168
    expr_5       go to state 169
    expr_6       go to state 170
    expr_7       go to state 171


State 156

   81 func_call: ID . MK_LPAREN func_call_param MK_RPAREN
   82          | ID . MK_LPAREN MK_RPAREN
   96 var_ref: ID .

    MK_LPAREN  shift, and go to state 152

    $default  reduce using rule 96 (var_ref)


State 157

  128 expr_7: CONST .

    $default  reduce using rule 128 (expr_7)


State 158

  124 expr_6: OP_NOT . expr_7

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr_7     go to state 198


State 159

  121 expr_4: OP_MINUS . expr_5

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr_5     go to state 199
    expr_6     go to state 170
    expr_7     go to state 171


State 160

  126 expr_7: MK_LPAREN . expr MK_RPAREN

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr       go to state 200
    expr_1     go to state 165
    expr_2     go to state 166
    expr_3     go to state 167
    expr_4     go to state 168
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 161

   78 return_stmt: RETURN MK_SEMICOLON .

    $default  reduce using rule 78 (return_stmt)


State 162

  129 expr_7: func_call .

    $default  reduce using rule 129 (expr_7)


State 163

   97 var_ref: var_ref . id_dim_list
   98        | var_ref . MK_DOT var_ref
  127 expr_7: var_ref .

    MK_LB   shift, and go to state 178
    MK_DOT  shift, and go to state 179

    $default  reduce using rule 127 (expr_7)

    id_dim_list  go to state 180


State 164

   79 return_stmt: RETURN expr . MK_SEMICOLON
  111 expr: expr . OP_OR expr_1

    OP_OR         shift, and go to state 201
    MK_SEMICOLON  shift, and go to state 202


State 165

  112 expr: expr_1 .
  113 expr_1: expr_1 . OP_AND expr_2

    OP_AND  shift, and go to state 203

    $default  reduce using rule 112 (expr)


State 166

  114 expr_1: expr_2 .
  115 expr_2: expr_2 . logic_op2 expr_3

    OP_EQ  shift, and go to state 88
    OP_NE  shift, and go to state 89

    $default  reduce using rule 114 (expr_1)

    logic_op2  go to state 204


State 167

  116 expr_2: expr_3 .
  117 expr_3: expr_3 . logic_op3 expr_4

    OP_GT  shift, and go to state 91
    OP_LT  shift, and go to state 92
    OP_GE  shift, and go to state 93
    OP_LE  shift, and go to state 94

    $default  reduce using rule 116 (expr_2)

    logic_op3  go to state 205


State 168

  118 expr_3: expr_4 .
  119 expr_4: expr_4 . add_op expr_5

    OP_PLUS   shift, and go to state 96
    OP_MINUS  shift, and go to state 97

    $default  reduce using rule 118 (expr_3)

    add_op  go to state 206


State 169

  120 expr_4: expr_5 .
  122 expr_5: expr_5 . mul_op expr_6

    OP_TIMES   shift, and go to state 99
    OP_DIVIDE  shift, and go to state 100

    $default  reduce using rule 120 (expr_4)

    mul_op  go to state 207


State 170

  123 expr_5: expr_6 .

    $default  reduce using rule 123 (expr_5)


State 171

  125 expr_6: expr_7 .

    $default  reduce using rule 125 (expr_6)


State 172

    8 var_decl: LL_type ID . OP_ASSIGN init_id_dim_unit MK_SEMICOLON
   19 init_id_unit: ID . init_id_dim_list
   20             | ID .

    OP_ASSIGN  shift, and go to state 46
    MK_LB      shift, and go to state 32

    $default  reduce using rule 20 (init_id_unit)

    init_id_dim_list  go to state 33


State 173

   58 function_decl: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE func_stmts MK_RBRACE .

    $default  reduce using rule 58 (function_decl)


State 174

   70 func_stmts: func_stmts func_stmt .

    $default  reduce using rule 70 (func_stmts)


State 175

   74 func_stmt: assign_stmt MK_SEMICOLON .

    $default  reduce using rule 74 (func_stmt)


State 176

   75 func_stmt: func_call MK_SEMICOLON .

    $default  reduce using rule 75 (func_stmt)


State 177

   80 assign_stmt: var_ref OP_ASSIGN . expr

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr       go to state 208
    expr_1     go to state 165
    expr_2     go to state 166
    expr_3     go to state 167
    expr_4     go to state 168
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 178

  100 id_dim_list: MK_LB . expr MK_RB

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr       go to state 209
    expr_1     go to state 165
    expr_2     go to state 166
    expr_3     go to state 167
    expr_4     go to state 168
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 179

   98 var_ref: var_ref MK_DOT . var_ref

    ID  shift, and go to state 210

    var_ref  go to state 211


State 180

   97 var_ref: var_ref id_dim_list .
   99 id_dim_list: id_dim_list . MK_LB expr MK_RB

    MK_LB  shift, and go to state 212

    MK_LB     [reduce using rule 97 (var_ref)]
    $default  reduce using rule 97 (var_ref)


State 181

   69 func_param_dim_list_other: MK_LB MK_RB .

    $default  reduce using rule 69 (func_param_dim_list_other)


State 182

   23 init_id_dim_unit: init_id_dim_unit . OP_OR init_expr_1
   65 func_param_dim_list: MK_LB init_id_dim_unit . MK_RB
   68 func_param_dim_list_other: MK_LB init_id_dim_unit . MK_RB

    OP_OR  shift, and go to state 85
    MK_RB  shift, and go to state 213


State 183

   64 func_param_dim_list: func_param_dim_list_other MK_LB . init_id_dim_unit MK_RB
   66 func_param_dim_list_other: func_param_dim_list_other MK_LB . init_id_dim_unit MK_RB
   67                          | func_param_dim_list_other MK_LB . MK_RB

    CONST      shift, and go to state 50
    OP_NOT     shift, and go to state 51
    OP_MINUS   shift, and go to state 52
    MK_RB      shift, and go to state 214
    MK_LPAREN  shift, and go to state 53

    init_id_dim_unit  go to state 215
    init_expr_1       go to state 55
    init_expr_2       go to state 56
    init_expr_3       go to state 57
    init_expr_4       go to state 58
    init_expr_5       go to state 59
    init_expr_6       go to state 60
    init_expr_7       go to state 61


State 184

   57 function_decl: VOID ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts . MK_RBRACE
   70 func_stmts: func_stmts . func_stmt

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_RBRACE  shift, and go to state 216
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmt         go to state 174
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 185

   53 function_decl: LL_type ID MK_LPAREN MK_RPAREN MK_LBRACE func_stmts MK_RBRACE .

    $default  reduce using rule 53 (function_decl)


State 186

   52 function_decl: LL_type ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts . MK_RBRACE
   70 func_stmts: func_stmts . func_stmt

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_RBRACE  shift, and go to state 217
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmt         go to state 174
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 187

   82 func_call: ID MK_LPAREN MK_RPAREN .

    $default  reduce using rule 82 (func_call)


State 188

   81 func_call: ID MK_LPAREN func_call_param . MK_RPAREN
   83 func_call_param: func_call_param . MK_COMMA expr

    MK_RPAREN  shift, and go to state 218
    MK_COMMA   shift, and go to state 219


State 189

   84 func_call_param: expr .
  111 expr: expr . OP_OR expr_1

    OP_OR  shift, and go to state 201

    $default  reduce using rule 84 (func_call_param)


State 190

   88 if_block: assign_stmt .

    $default  reduce using rule 88 (if_block)


State 191

   85 contr_stmt: IF MK_LPAREN if_block . MK_RPAREN contr_block
   86           | IF MK_LPAREN if_block . MK_RPAREN contr_block ELSE contr_block

    MK_RPAREN  shift, and go to state 220


State 192

   80 assign_stmt: var_ref . OP_ASSIGN expr
   97 var_ref: var_ref . id_dim_list
   98        | var_ref . MK_DOT var_ref
  127 expr_7: var_ref .

    OP_ASSIGN  shift, and go to state 177
    MK_LB      shift, and go to state 178
    MK_DOT     shift, and go to state 179

    $default  reduce using rule 127 (expr_7)

    id_dim_list  go to state 180


State 193

   87 if_block: expr .
  111 expr: expr . OP_OR expr_1

    OP_OR  shift, and go to state 201

    $default  reduce using rule 87 (if_block)


State 194

   92 loop_stmt: WHILE MK_LPAREN if_block . MK_RPAREN MK_LBRACE func_stmts MK_RBRACE

    MK_RPAREN  shift, and go to state 221


State 195

   94 for_block: assign_stmt .

    $default  reduce using rule 94 (for_block)


State 196

   91 loop_stmt: FOR MK_LPAREN for_block . MK_SEMICOLON for_block MK_SEMICOLON for_block MK_RPAREN contr_block

    MK_SEMICOLON  shift, and go to state 222


State 197

   93 for_block: expr .
  111 expr: expr . OP_OR expr_1

    OP_OR  shift, and go to state 201

    $default  reduce using rule 93 (for_block)


State 198

  124 expr_6: OP_NOT expr_7 .

    $default  reduce using rule 124 (expr_6)


State 199

  121 expr_4: OP_MINUS expr_5 .
  122 expr_5: expr_5 . mul_op expr_6

    OP_TIMES   shift, and go to state 99
    OP_DIVIDE  shift, and go to state 100

    $default  reduce using rule 121 (expr_4)

    mul_op  go to state 207


State 200

  111 expr: expr . OP_OR expr_1
  126 expr_7: MK_LPAREN expr . MK_RPAREN

    OP_OR      shift, and go to state 201
    MK_RPAREN  shift, and go to state 223


State 201

  111 expr: expr OP_OR . expr_1

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr_1     go to state 224
    expr_2     go to state 166
    expr_3     go to state 167
    expr_4     go to state 168
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 202

   79 return_stmt: RETURN expr MK_SEMICOLON .

    $default  reduce using rule 79 (return_stmt)


State 203

  113 expr_1: expr_1 OP_AND . expr_2

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr_2     go to state 225
    expr_3     go to state 167
    expr_4     go to state 168
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 204

  115 expr_2: expr_2 logic_op2 . expr_3

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr_3     go to state 226
    expr_4     go to state 168
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 205

  117 expr_3: expr_3 logic_op3 . expr_4

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr_4     go to state 227
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 206

  119 expr_4: expr_4 add_op . expr_5

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr_5     go to state 228
    expr_6     go to state 170
    expr_7     go to state 171


State 207

  122 expr_5: expr_5 mul_op . expr_6

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr_6     go to state 229
    expr_7     go to state 171


State 208

   80 assign_stmt: var_ref OP_ASSIGN expr .
  111 expr: expr . OP_OR expr_1

    OP_OR  shift, and go to state 201

    $default  reduce using rule 80 (assign_stmt)


State 209

  100 id_dim_list: MK_LB expr . MK_RB
  111 expr: expr . OP_OR expr_1

    OP_OR  shift, and go to state 201
    MK_RB  shift, and go to state 230


State 210

   96 var_ref: ID .

    $default  reduce using rule 96 (var_ref)


State 211

   97 var_ref: var_ref . id_dim_list
   98        | var_ref . MK_DOT var_ref
   98        | var_ref MK_DOT var_ref .

    MK_LB   shift, and go to state 178
    MK_DOT  shift, and go to state 179

    MK_LB     [reduce using rule 98 (var_ref)]
    MK_DOT    [reduce using rule 98 (var_ref)]
    $default  reduce using rule 98 (var_ref)

    id_dim_list  go to state 180


State 212

   99 id_dim_list: id_dim_list MK_LB . expr MK_RB

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr       go to state 231
    expr_1     go to state 165
    expr_2     go to state 166
    expr_3     go to state 167
    expr_4     go to state 168
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 213

   65 func_param_dim_list: MK_LB init_id_dim_unit MK_RB .
   68 func_param_dim_list_other: MK_LB init_id_dim_unit MK_RB .

    MK_LB     reduce using rule 68 (func_param_dim_list_other)
    $default  reduce using rule 65 (func_param_dim_list)


State 214

   67 func_param_dim_list_other: func_param_dim_list_other MK_LB MK_RB .

    $default  reduce using rule 67 (func_param_dim_list_other)


State 215

   23 init_id_dim_unit: init_id_dim_unit . OP_OR init_expr_1
   64 func_param_dim_list: func_param_dim_list_other MK_LB init_id_dim_unit . MK_RB
   66 func_param_dim_list_other: func_param_dim_list_other MK_LB init_id_dim_unit . MK_RB

    OP_OR  shift, and go to state 85
    MK_RB  shift, and go to state 232


State 216

   57 function_decl: VOID ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE .

    $default  reduce using rule 57 (function_decl)


State 217

   52 function_decl: LL_type ID MK_LPAREN func_param_list MK_RPAREN MK_LBRACE func_stmts MK_RBRACE .

    $default  reduce using rule 52 (function_decl)


State 218

   81 func_call: ID MK_LPAREN func_call_param MK_RPAREN .

    $default  reduce using rule 81 (func_call)


State 219

   83 func_call_param: func_call_param MK_COMMA . expr

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    func_call  go to state 162
    var_ref    go to state 163
    expr       go to state 233
    expr_1     go to state 165
    expr_2     go to state 166
    expr_3     go to state 167
    expr_4     go to state 168
    expr_5     go to state 169
    expr_6     go to state 170
    expr_7     go to state 171


State 220

   85 contr_stmt: IF MK_LPAREN if_block MK_RPAREN . contr_block
   86           | IF MK_LPAREN if_block MK_RPAREN . contr_block ELSE contr_block

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_LBRACE  shift, and go to state 234
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmt         go to state 235
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    contr_block       go to state 236
    loop_stmt         go to state 138
    var_ref           go to state 139


State 221

   92 loop_stmt: WHILE MK_LPAREN if_block MK_RPAREN . MK_LBRACE func_stmts MK_RBRACE

    MK_LBRACE  shift, and go to state 237


State 222

   91 loop_stmt: FOR MK_LPAREN for_block MK_SEMICOLON . for_block MK_SEMICOLON for_block MK_RPAREN contr_block

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    $default  reduce using rule 95 (for_block)

    assign_stmt  go to state 195
    func_call    go to state 162
    for_block    go to state 238
    var_ref      go to state 192
    expr         go to state 197
    expr_1       go to state 165
    expr_2       go to state 166
    expr_3       go to state 167
    expr_4       go to state 168
    expr_5       go to state 169
    expr_6       go to state 170
    expr_7       go to state 171


State 223

  126 expr_7: MK_LPAREN expr MK_RPAREN .

    $default  reduce using rule 126 (expr_7)


State 224

  111 expr: expr OP_OR expr_1 .
  113 expr_1: expr_1 . OP_AND expr_2

    OP_AND  shift, and go to state 203

    $default  reduce using rule 111 (expr)


State 225

  113 expr_1: expr_1 OP_AND expr_2 .
  115 expr_2: expr_2 . logic_op2 expr_3

    OP_EQ  shift, and go to state 88
    OP_NE  shift, and go to state 89

    $default  reduce using rule 113 (expr_1)

    logic_op2  go to state 204


State 226

  115 expr_2: expr_2 logic_op2 expr_3 .
  117 expr_3: expr_3 . logic_op3 expr_4

    OP_GT  shift, and go to state 91
    OP_LT  shift, and go to state 92
    OP_GE  shift, and go to state 93
    OP_LE  shift, and go to state 94

    $default  reduce using rule 115 (expr_2)

    logic_op3  go to state 205


State 227

  117 expr_3: expr_3 logic_op3 expr_4 .
  119 expr_4: expr_4 . add_op expr_5

    OP_PLUS   shift, and go to state 96
    OP_MINUS  shift, and go to state 97

    $default  reduce using rule 117 (expr_3)

    add_op  go to state 206


State 228

  119 expr_4: expr_4 add_op expr_5 .
  122 expr_5: expr_5 . mul_op expr_6

    OP_TIMES   shift, and go to state 99
    OP_DIVIDE  shift, and go to state 100

    $default  reduce using rule 119 (expr_4)

    mul_op  go to state 207


State 229

  122 expr_5: expr_5 mul_op expr_6 .

    $default  reduce using rule 122 (expr_5)


State 230

  100 id_dim_list: MK_LB expr MK_RB .

    $default  reduce using rule 100 (id_dim_list)


State 231

   99 id_dim_list: id_dim_list MK_LB expr . MK_RB
  111 expr: expr . OP_OR expr_1

    OP_OR  shift, and go to state 201
    MK_RB  shift, and go to state 239


State 232

   64 func_param_dim_list: func_param_dim_list_other MK_LB init_id_dim_unit MK_RB .
   66 func_param_dim_list_other: func_param_dim_list_other MK_LB init_id_dim_unit MK_RB .

    MK_LB     reduce using rule 66 (func_param_dim_list_other)
    $default  reduce using rule 64 (func_param_dim_list)


State 233

   83 func_call_param: func_call_param MK_COMMA expr .
  111 expr: expr . OP_OR expr_1

    OP_OR  shift, and go to state 201

    $default  reduce using rule 83 (func_call_param)


State 234

   90 contr_block: MK_LBRACE . func_stmts MK_RBRACE

    ID       shift, and go to state 124
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    IF       shift, and go to state 125
    WHILE    shift, and go to state 126
    FOR      shift, and go to state 127
    STRUCT   shift, and go to state 8
    TYPEDEF  shift, and go to state 9
    RETURN   shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmts        go to state 240
    func_stmt         go to state 133
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 235

   89 contr_block: func_stmt .

    $default  reduce using rule 89 (contr_block)


State 236

   85 contr_stmt: IF MK_LPAREN if_block MK_RPAREN contr_block .
   86           | IF MK_LPAREN if_block MK_RPAREN contr_block . ELSE contr_block

    ELSE  shift, and go to state 241

    ELSE      [reduce using rule 85 (contr_stmt)]
    $default  reduce using rule 85 (contr_stmt)


State 237

   92 loop_stmt: WHILE MK_LPAREN if_block MK_RPAREN MK_LBRACE . func_stmts MK_RBRACE

    ID       shift, and go to state 124
    INT      shift, and go to state 6
    FLOAT    shift, and go to state 7
    IF       shift, and go to state 125
    WHILE    shift, and go to state 126
    FOR      shift, and go to state 127
    STRUCT   shift, and go to state 8
    TYPEDEF  shift, and go to state 9
    RETURN   shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmts        go to state 242
    func_stmt         go to state 133
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 238

   91 loop_stmt: FOR MK_LPAREN for_block MK_SEMICOLON for_block . MK_SEMICOLON for_block MK_RPAREN contr_block

    MK_SEMICOLON  shift, and go to state 243


State 239

   99 id_dim_list: id_dim_list MK_LB expr MK_RB .

    $default  reduce using rule 99 (id_dim_list)


State 240

   70 func_stmts: func_stmts . func_stmt
   90 contr_block: MK_LBRACE func_stmts . MK_RBRACE

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_RBRACE  shift, and go to state 244
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmt         go to state 174
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 241

   86 contr_stmt: IF MK_LPAREN if_block MK_RPAREN contr_block ELSE . contr_block

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_LBRACE  shift, and go to state 234
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmt         go to state 235
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    contr_block       go to state 245
    loop_stmt         go to state 138
    var_ref           go to state 139


State 242

   70 func_stmts: func_stmts . func_stmt
   92 loop_stmt: WHILE MK_LPAREN if_block MK_RPAREN MK_LBRACE func_stmts . MK_RBRACE

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_RBRACE  shift, and go to state 246
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmt         go to state 174
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    loop_stmt         go to state 138
    var_ref           go to state 139


State 243

   91 loop_stmt: FOR MK_LPAREN for_block MK_SEMICOLON for_block MK_SEMICOLON . for_block MK_RPAREN contr_block

    ID         shift, and go to state 156
    CONST      shift, and go to state 157
    OP_NOT     shift, and go to state 158
    OP_MINUS   shift, and go to state 159
    MK_LPAREN  shift, and go to state 160

    $default  reduce using rule 95 (for_block)

    assign_stmt  go to state 195
    func_call    go to state 162
    for_block    go to state 247
    var_ref      go to state 192
    expr         go to state 197
    expr_1       go to state 165
    expr_2       go to state 166
    expr_3       go to state 167
    expr_4       go to state 168
    expr_5       go to state 169
    expr_6       go to state 170
    expr_7       go to state 171


State 244

   90 contr_block: MK_LBRACE func_stmts MK_RBRACE .

    $default  reduce using rule 90 (contr_block)


State 245

   86 contr_stmt: IF MK_LPAREN if_block MK_RPAREN contr_block ELSE contr_block .

    $default  reduce using rule 86 (contr_stmt)


State 246

   92 loop_stmt: WHILE MK_LPAREN if_block MK_RPAREN MK_LBRACE func_stmts MK_RBRACE .

    $default  reduce using rule 92 (loop_stmt)


State 247

   91 loop_stmt: FOR MK_LPAREN for_block MK_SEMICOLON for_block MK_SEMICOLON for_block . MK_RPAREN contr_block

    MK_RPAREN  shift, and go to state 248


State 248

   91 loop_stmt: FOR MK_LPAREN for_block MK_SEMICOLON for_block MK_SEMICOLON for_block MK_RPAREN . contr_block

    ID         shift, and go to state 124
    INT        shift, and go to state 6
    FLOAT      shift, and go to state 7
    IF         shift, and go to state 125
    WHILE      shift, and go to state 126
    FOR        shift, and go to state 127
    STRUCT     shift, and go to state 8
    TYPEDEF    shift, and go to state 9
    MK_LBRACE  shift, and go to state 234
    RETURN     shift, and go to state 129

    nonfunction_decl  go to state 130
    var_decl          go to state 12
    LL_type           go to state 131
    HL_type           go to state 14
    struct_type       go to state 15
    type_decl         go to state 16
    func_stmt         go to state 235
    return_stmt       go to state 134
    assign_stmt       go to state 135
    func_call         go to state 136
    contr_stmt        go to state 137
    contr_block       go to state 249
    loop_stmt         go to state 138
    var_ref           go to state 139


State 249

   91 loop_stmt: FOR MK_LPAREN for_block MK_SEMICOLON for_block MK_SEMICOLON for_block MK_RPAREN contr_block .

    $default  reduce using rule 91 (loop_stmt)
