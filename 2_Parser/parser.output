Terminals unused in grammar

   IF
   ELSE
   WHILE
   FOR
   STRUCT
   TYPEDEF
   OP_OR
   OP_AND
   OP_NOT
   OP_EQ
   OP_NE
   OP_GT
   OP_LT
   OP_GE
   OP_LE
   OP_PLUS
   OP_MINUS
   OP_TIMES
   OP_DIVIDE
   MK_DOT
   ERROR
   RETURN


State 16 conflicts: 1 shift/reduce
State 22 conflicts: 5 shift/reduce
State 34 conflicts: 1 shift/reduce
State 51 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: global_decl_list

    2 global_decl_list: global_decl_list global_decl
    3                 | global_decl

    4 global_decl: type function_name MK_LPAREN parameter_list MK_RPAREN MK_LBRACE statement_list MK_RBRACE

    5 type: INT
    6     | FLOAT
    7     | VOID

    8 function_name: ID

    9 parameter_list: parameter_list MK_COMMA parameter
   10               | parameter
   11               | %empty

   12 parameter: type ID array_braces_list_one

   13 array_braces_list_one: array_braces_list_one array_braces
   14                      | blank_array_braces
   15                      | %empty

   16 array_braces: MK_LB argument_data MK_RB

   17 argument_data: CONST

   18 blank_array_braces: MK_LB CONST MK_RB
   19                   | MK_LB MK_RB

   20 statement_list: statement_list statement
   21               | statement
   22               | %empty

   23 statement: type identifier_dec_list MK_SEMICOLON
   24          | identifier_dec_list MK_SEMICOLON
   25          | MK_SEMICOLON

   26 identifier_dec_list: identifier_dec_list assignment MK_COMMA identifier_dec assignment
   27                    | identifier_dec assignment

   28 identifier_dec: ID array_braces_list_two

   29 array_braces_list_two: array_braces_list_two array_braces
   30                      | %empty

   31 assignment: OP_ASSIGN CONST
   32           | %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 8 12 28
CONST (259) 17 18 31
VOID (260) 7
INT (261) 5
FLOAT (262) 6
IF (263)
ELSE (264)
WHILE (265)
FOR (266)
STRUCT (267)
TYPEDEF (268)
OP_ASSIGN (269) 31
OP_OR (270)
OP_AND (271)
OP_NOT (272)
OP_EQ (273)
OP_NE (274)
OP_GT (275)
OP_LT (276)
OP_GE (277)
OP_LE (278)
OP_PLUS (279)
OP_MINUS (280)
OP_TIMES (281)
OP_DIVIDE (282)
MK_LB (283) 16 18 19
MK_RB (284) 16 18 19
MK_LPAREN (285) 4
MK_RPAREN (286) 4
MK_LBRACE (287) 4
MK_RBRACE (288) 4
MK_COMMA (289) 9 26
MK_SEMICOLON (290) 23 24 25
MK_DOT (291)
ERROR (292)
RETURN (293)


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
program (40)
    on left: 1, on right: 0
global_decl_list (41)
    on left: 2 3, on right: 1 2
global_decl (42)
    on left: 4, on right: 2 3
type (43)
    on left: 5 6 7, on right: 4 12 23
function_name (44)
    on left: 8, on right: 4
parameter_list (45)
    on left: 9 10 11, on right: 4 9
parameter (46)
    on left: 12, on right: 9 10
array_braces_list_one (47)
    on left: 13 14 15, on right: 12 13
array_braces (48)
    on left: 16, on right: 13 29
argument_data (49)
    on left: 17, on right: 16
blank_array_braces (50)
    on left: 18 19, on right: 14
statement_list (51)
    on left: 20 21 22, on right: 4 20
statement (52)
    on left: 23 24 25, on right: 20 21
identifier_dec_list (53)
    on left: 26 27, on right: 23 24 26
identifier_dec (54)
    on left: 28, on right: 26 27
array_braces_list_two (55)
    on left: 29 30, on right: 28 29
assignment (56)
    on left: 31 32, on right: 26 27


State 0

    0 $accept: . program $end

    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3

    program           go to state 4
    global_decl_list  go to state 5
    global_decl       go to state 6
    type              go to state 7


State 1

    7 type: VOID .

    $default  reduce using rule 7 (type)


State 2

    5 type: INT .

    $default  reduce using rule 5 (type)


State 3

    6 type: FLOAT .

    $default  reduce using rule 6 (type)


State 4

    0 $accept: program . $end

    $end  shift, and go to state 8


State 5

    1 program: global_decl_list .
    2 global_decl_list: global_decl_list . global_decl

    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 1 (program)

    global_decl  go to state 9
    type         go to state 7


State 6

    3 global_decl_list: global_decl .

    $default  reduce using rule 3 (global_decl_list)


State 7

    4 global_decl: type . function_name MK_LPAREN parameter_list MK_RPAREN MK_LBRACE statement_list MK_RBRACE

    ID  shift, and go to state 10

    function_name  go to state 11


State 8

    0 $accept: program $end .

    $default  accept


State 9

    2 global_decl_list: global_decl_list global_decl .

    $default  reduce using rule 2 (global_decl_list)


State 10

    8 function_name: ID .

    $default  reduce using rule 8 (function_name)


State 11

    4 global_decl: type function_name . MK_LPAREN parameter_list MK_RPAREN MK_LBRACE statement_list MK_RBRACE

    MK_LPAREN  shift, and go to state 12


State 12

    4 global_decl: type function_name MK_LPAREN . parameter_list MK_RPAREN MK_LBRACE statement_list MK_RBRACE

    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3

    $default  reduce using rule 11 (parameter_list)

    type            go to state 13
    parameter_list  go to state 14
    parameter       go to state 15


State 13

   12 parameter: type . ID array_braces_list_one

    ID  shift, and go to state 16


State 14

    4 global_decl: type function_name MK_LPAREN parameter_list . MK_RPAREN MK_LBRACE statement_list MK_RBRACE
    9 parameter_list: parameter_list . MK_COMMA parameter

    MK_RPAREN  shift, and go to state 17
    MK_COMMA   shift, and go to state 18


State 15

   10 parameter_list: parameter .

    $default  reduce using rule 10 (parameter_list)


State 16

   12 parameter: type ID . array_braces_list_one

    MK_LB  shift, and go to state 19

    MK_LB     [reduce using rule 15 (array_braces_list_one)]
    $default  reduce using rule 15 (array_braces_list_one)

    array_braces_list_one  go to state 20
    blank_array_braces     go to state 21


State 17

    4 global_decl: type function_name MK_LPAREN parameter_list MK_RPAREN . MK_LBRACE statement_list MK_RBRACE

    MK_LBRACE  shift, and go to state 22


State 18

    9 parameter_list: parameter_list MK_COMMA . parameter

    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3

    type       go to state 13
    parameter  go to state 23


State 19

   18 blank_array_braces: MK_LB . CONST MK_RB
   19                   | MK_LB . MK_RB

    CONST  shift, and go to state 24
    MK_RB  shift, and go to state 25


State 20

   12 parameter: type ID array_braces_list_one .
   13 array_braces_list_one: array_braces_list_one . array_braces

    MK_LB  shift, and go to state 26

    $default  reduce using rule 12 (parameter)

    array_braces  go to state 27


State 21

   14 array_braces_list_one: blank_array_braces .

    $default  reduce using rule 14 (array_braces_list_one)


State 22

    4 global_decl: type function_name MK_LPAREN parameter_list MK_RPAREN MK_LBRACE . statement_list MK_RBRACE

    ID            shift, and go to state 28
    VOID          shift, and go to state 1
    INT           shift, and go to state 2
    FLOAT         shift, and go to state 3
    MK_SEMICOLON  shift, and go to state 29

    ID            [reduce using rule 22 (statement_list)]
    VOID          [reduce using rule 22 (statement_list)]
    INT           [reduce using rule 22 (statement_list)]
    FLOAT         [reduce using rule 22 (statement_list)]
    MK_SEMICOLON  [reduce using rule 22 (statement_list)]
    $default      reduce using rule 22 (statement_list)

    type                 go to state 30
    statement_list       go to state 31
    statement            go to state 32
    identifier_dec_list  go to state 33
    identifier_dec       go to state 34


State 23

    9 parameter_list: parameter_list MK_COMMA parameter .

    $default  reduce using rule 9 (parameter_list)


State 24

   18 blank_array_braces: MK_LB CONST . MK_RB

    MK_RB  shift, and go to state 35


State 25

   19 blank_array_braces: MK_LB MK_RB .

    $default  reduce using rule 19 (blank_array_braces)


State 26

   16 array_braces: MK_LB . argument_data MK_RB

    CONST  shift, and go to state 36

    argument_data  go to state 37


State 27

   13 array_braces_list_one: array_braces_list_one array_braces .

    $default  reduce using rule 13 (array_braces_list_one)


State 28

   28 identifier_dec: ID . array_braces_list_two

    $default  reduce using rule 30 (array_braces_list_two)

    array_braces_list_two  go to state 38


State 29

   25 statement: MK_SEMICOLON .

    $default  reduce using rule 25 (statement)


State 30

   23 statement: type . identifier_dec_list MK_SEMICOLON

    ID  shift, and go to state 28

    identifier_dec_list  go to state 39
    identifier_dec       go to state 34


State 31

    4 global_decl: type function_name MK_LPAREN parameter_list MK_RPAREN MK_LBRACE statement_list . MK_RBRACE
   20 statement_list: statement_list . statement

    ID            shift, and go to state 28
    VOID          shift, and go to state 1
    INT           shift, and go to state 2
    FLOAT         shift, and go to state 3
    MK_RBRACE     shift, and go to state 40
    MK_SEMICOLON  shift, and go to state 29

    type                 go to state 30
    statement            go to state 41
    identifier_dec_list  go to state 33
    identifier_dec       go to state 34


State 32

   21 statement_list: statement .

    $default  reduce using rule 21 (statement_list)


State 33

   24 statement: identifier_dec_list . MK_SEMICOLON
   26 identifier_dec_list: identifier_dec_list . assignment MK_COMMA identifier_dec assignment

    OP_ASSIGN     shift, and go to state 42
    MK_SEMICOLON  shift, and go to state 43

    $default  reduce using rule 32 (assignment)

    assignment  go to state 44


State 34

   27 identifier_dec_list: identifier_dec . assignment

    OP_ASSIGN  shift, and go to state 42

    OP_ASSIGN  [reduce using rule 32 (assignment)]
    $default   reduce using rule 32 (assignment)

    assignment  go to state 45


State 35

   18 blank_array_braces: MK_LB CONST MK_RB .

    $default  reduce using rule 18 (blank_array_braces)


State 36

   17 argument_data: CONST .

    $default  reduce using rule 17 (argument_data)


State 37

   16 array_braces: MK_LB argument_data . MK_RB

    MK_RB  shift, and go to state 46


State 38

   28 identifier_dec: ID array_braces_list_two .
   29 array_braces_list_two: array_braces_list_two . array_braces

    MK_LB  shift, and go to state 26

    $default  reduce using rule 28 (identifier_dec)

    array_braces  go to state 47


State 39

   23 statement: type identifier_dec_list . MK_SEMICOLON
   26 identifier_dec_list: identifier_dec_list . assignment MK_COMMA identifier_dec assignment

    OP_ASSIGN     shift, and go to state 42
    MK_SEMICOLON  shift, and go to state 48

    $default  reduce using rule 32 (assignment)

    assignment  go to state 44


State 40

    4 global_decl: type function_name MK_LPAREN parameter_list MK_RPAREN MK_LBRACE statement_list MK_RBRACE .

    $default  reduce using rule 4 (global_decl)


State 41

   20 statement_list: statement_list statement .

    $default  reduce using rule 20 (statement_list)


State 42

   31 assignment: OP_ASSIGN . CONST

    CONST  shift, and go to state 49


State 43

   24 statement: identifier_dec_list MK_SEMICOLON .

    $default  reduce using rule 24 (statement)


State 44

   26 identifier_dec_list: identifier_dec_list assignment . MK_COMMA identifier_dec assignment

    MK_COMMA  shift, and go to state 50


State 45

   27 identifier_dec_list: identifier_dec assignment .

    $default  reduce using rule 27 (identifier_dec_list)


State 46

   16 array_braces: MK_LB argument_data MK_RB .

    $default  reduce using rule 16 (array_braces)


State 47

   29 array_braces_list_two: array_braces_list_two array_braces .

    $default  reduce using rule 29 (array_braces_list_two)


State 48

   23 statement: type identifier_dec_list MK_SEMICOLON .

    $default  reduce using rule 23 (statement)


State 49

   31 assignment: OP_ASSIGN CONST .

    $default  reduce using rule 31 (assignment)


State 50

   26 identifier_dec_list: identifier_dec_list assignment MK_COMMA . identifier_dec assignment

    ID  shift, and go to state 28

    identifier_dec  go to state 51


State 51

   26 identifier_dec_list: identifier_dec_list assignment MK_COMMA identifier_dec . assignment

    OP_ASSIGN  shift, and go to state 42

    OP_ASSIGN  [reduce using rule 32 (assignment)]
    $default   reduce using rule 32 (assignment)

    assignment  go to state 52


State 52

   26 identifier_dec_list: identifier_dec_list assignment MK_COMMA identifier_dec assignment .

    $default  reduce using rule 26 (identifier_dec_list)
