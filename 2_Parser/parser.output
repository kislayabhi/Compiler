Terminals unused in grammar

   TYPEDEF
   ERROR


Grammar

    0 $accept: program $end

    1 program: global_decl_list

    2 global_decl_list: global_decl_list global_decl
    3                 | MK_SEMICOLON
    4                 | %empty

    5 global_decl: function_decl MK_SEMICOLON
    6            | function_def
    7            | horz_decl_init_list MK_SEMICOLON
    8            | horz_init_list MK_SEMICOLON
    9            | function_call MK_SEMICOLON
   10            | control_flow
   11            | struct_or_union_decl MK_SEMICOLON

   12 function_decl: type ID MK_LPAREN parameter_list MK_RPAREN
   13              | type ID MK_LPAREN MK_RPAREN
   14              | VOID ID MK_LPAREN parameter_list MK_RPAREN
   15              | VOID ID MK_LPAREN MK_RPAREN

   16 function_def: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE
   17             | type ID MK_LPAREN MK_RPAREN MK_LBRACE function_body MK_RBRACE
   18             | VOID ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE
   19             | VOID ID MK_LPAREN MK_RPAREN MK_LBRACE function_body MK_RBRACE
   20             | type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE error MK_SEMICOLON

   21 struct_or_union_decl: STRUCT id MK_LBRACE function_body MK_RBRACE struct_members
   22                     | STRUCT MK_LBRACE function_body MK_RBRACE struct_members
   23                     | STRUCT id MK_LBRACE function_body MK_RBRACE
   24                     | STRUCT MK_LBRACE function_body MK_RBRACE
   25                     | STRUCT id struct_members

   26 struct_members: derived_id MK_COMMA struct_members
   27               | derived_id

   28 function_body: statement_list

   29 statement_list: statement_list statement
   30               | %empty

   31 statement: return_statement MK_SEMICOLON
   32          | function_call MK_SEMICOLON
   33          | control_flow
   34          | control_arguments MK_SEMICOLON
   35          | struct_or_union_decl MK_SEMICOLON
   36          | MK_SEMICOLON

   37 control_flow: WHILE MK_LPAREN control_arguments MK_RPAREN statement
   38             | WHILE MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE
   39             | IF MK_LPAREN control_arguments MK_RPAREN statement
   40             | IF MK_LPAREN control_arguments MK_RPAREN statement ELSE statement
   41             | IF MK_LPAREN control_arguments MK_RPAREN statement ELSE MK_LBRACE function_body MK_RBRACE
   42             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE
   43             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE statement
   44             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE MK_LBRACE function_body MK_RBRACE
   45             | FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN statement
   46             | FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE

   47 control_arguments: expression_list_list
   48                  | horz_init_list
   49                  | horz_decl_init_list

   50 return_statement: RETURN sign CONST
   51                 | RETURN CONST
   52                 | RETURN sign id
   53                 | RETURN id
   54                 | RETURN

   55 horz_init_list: derived_id hard_assignment

   56 derived_id: id MK_DOT id
   57           | id

   58 id: ID
   59   | ID array_braces array_braces_list
   60   | ID blank_array_braces array_braces_list

   61 horz_decl_init_list: parameter_decl assignment more_horz_param_list
   62                    | parameter_decl assignment

   63 more_horz_param_list: MK_COMMA ID assignment more_horz_param_list
   64                     | MK_COMMA ID assignment

   65 assignment: hard_assignment
   66           | %empty

   67 hard_assignment: OP_ASSIGN function_call
   68                | OP_ASSIGN expression_list_list
   69                | OP_ASSIGN error MK_SEMICOLON

   70 expression_list_list: CONST
   71                     | CONST expression_list
   72                     | derived_id expression_list
   73                     | expression_list
   74                     | derived_id

   75 expression_list: expression expression_list
   76                | expression

   77 expression: arithmetic_units primary
   78           | arithmetic_units
   79           | arithmetic_units MK_LPAREN expression_list_list MK_RPAREN
   80           | MK_LPAREN expression_list_list MK_RPAREN

   81 primary: id
   82        | CONST

   83 function_call: ID MK_LPAREN MK_RPAREN
   84              | ID MK_LPAREN argument_list MK_RPAREN

   85 argument_list: argument
   86              | argument_list MK_COMMA argument

   87 argument: id
   88         | CONST

   89 parameter_list: parameter_decl
   90               | parameter_list MK_COMMA parameter_decl

   91 parameter_decl: variable_decl
   92               | array_decl

   93 variable_decl: type ID

   94 array_decl: type ID array_braces array_braces_list
   95           | type ID blank_array_braces array_braces_list

   96 array_braces_list: array_braces_list array_braces
   97                  | %empty

   98 array_braces: MK_LB CONST MK_RB
   99             | MK_LB ID MK_RB

  100 blank_array_braces: MK_LB MK_RB

  101 type: INT
  102     | FLOAT

  103 sign: OP_PLUS
  104     | OP_MINUS
  105     | OP_NOT

  106 arithmetic_units: sign
  107                 | OP_TIMES
  108                 | OP_DIVIDE
  109                 | binary_units

  110 binary_units: OP_OR
  111             | OP_AND
  112             | OP_EQ
  113             | OP_NE
  114             | OP_LT
  115             | OP_GT
  116             | OP_LE
  117             | OP_GE


Terminals, with rules where they appear

$end (0) 0
error (256) 20 69
ID (258) 12 13 14 15 16 17 18 19 20 58 59 60 63 64 83 84 93 94 95 99
CONST (259) 50 51 70 71 82 88 98
VOID (260) 14 15 18 19
INT (261) 101
FLOAT (262) 102
IF (263) 39 40 41 42 43 44
ELSE (264) 40 41 43 44
WHILE (265) 37 38
FOR (266) 45 46
STRUCT (267) 21 22 23 24 25
TYPEDEF (268)
OP_ASSIGN (269) 67 68 69
OP_OR (270) 110
OP_AND (271) 111
OP_NOT (272) 105
OP_EQ (273) 112
OP_NE (274) 113
OP_GT (275) 115
OP_LT (276) 114
OP_GE (277) 117
OP_LE (278) 116
OP_PLUS (279) 103
OP_MINUS (280) 104
OP_TIMES (281) 107
OP_DIVIDE (282) 108
MK_LB (283) 98 99 100
MK_RB (284) 98 99 100
MK_LPAREN (285) 12 13 14 15 16 17 18 19 20 37 38 39 40 41 42 43 44
    45 46 79 80 83 84
MK_RPAREN (286) 12 13 14 15 16 17 18 19 20 37 38 39 40 41 42 43 44
    45 46 79 80 83 84
MK_LBRACE (287) 16 17 18 19 20 21 22 23 24 38 41 42 43 44 46
MK_RBRACE (288) 16 17 18 19 21 22 23 24 38 41 42 43 44 46
MK_COMMA (289) 26 63 64 86 90
MK_SEMICOLON (290) 3 5 7 8 9 11 20 31 32 34 35 36 45 46 69
MK_DOT (291) 56
ERROR (292)
RETURN (293) 50 51 52 53 54
"then" (294)
"lessthanlparen" (295)


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
program (42)
    on left: 1, on right: 0
global_decl_list (43)
    on left: 2 3 4, on right: 1 2
global_decl (44)
    on left: 5 6 7 8 9 10 11, on right: 2
function_decl (45)
    on left: 12 13 14 15, on right: 5
function_def (46)
    on left: 16 17 18 19 20, on right: 6
struct_or_union_decl (47)
    on left: 21 22 23 24 25, on right: 11 35
struct_members (48)
    on left: 26 27, on right: 21 22 25 26
function_body (49)
    on left: 28, on right: 16 17 18 19 21 22 23 24 38 41 42 43 44 46
statement_list (50)
    on left: 29 30, on right: 28 29
statement (51)
    on left: 31 32 33 34 35 36, on right: 29 37 39 40 41 43 45
control_flow (52)
    on left: 37 38 39 40 41 42 43 44 45 46, on right: 10 33
control_arguments (53)
    on left: 47 48 49, on right: 34 37 38 39 40 41 42 43 44 45 46
return_statement (54)
    on left: 50 51 52 53 54, on right: 31
horz_init_list (55)
    on left: 55, on right: 8 48
derived_id (56)
    on left: 56 57, on right: 26 27 55 72 74
id (57)
    on left: 58 59 60, on right: 21 23 25 52 53 56 57 81 87
horz_decl_init_list (58)
    on left: 61 62, on right: 7 49
more_horz_param_list (59)
    on left: 63 64, on right: 61 63
assignment (60)
    on left: 65 66, on right: 61 62 63 64
hard_assignment (61)
    on left: 67 68 69, on right: 55 65
expression_list_list (62)
    on left: 70 71 72 73 74, on right: 47 68 79 80
expression_list (63)
    on left: 75 76, on right: 71 72 73 75
expression (64)
    on left: 77 78 79 80, on right: 75 76
primary (65)
    on left: 81 82, on right: 77
function_call (66)
    on left: 83 84, on right: 9 32 67
argument_list (67)
    on left: 85 86, on right: 84 86
argument (68)
    on left: 87 88, on right: 85 86
parameter_list (69)
    on left: 89 90, on right: 12 14 16 18 20 90
parameter_decl (70)
    on left: 91 92, on right: 61 62 89 90
variable_decl (71)
    on left: 93, on right: 91
array_decl (72)
    on left: 94 95, on right: 92
array_braces_list (73)
    on left: 96 97, on right: 59 60 94 95 96
array_braces (74)
    on left: 98 99, on right: 59 94 96
blank_array_braces (75)
    on left: 100, on right: 60 95
type (76)
    on left: 101 102, on right: 12 13 16 17 20 93 94 95
sign (77)
    on left: 103 104 105, on right: 50 52 106
arithmetic_units (78)
    on left: 106 107 108 109, on right: 77 78 79
binary_units (79)
    on left: 110 111 112 113 114 115 116 117, on right: 109


State 0

    0 $accept: . program $end

    MK_SEMICOLON  shift, and go to state 1

    $default  reduce using rule 4 (global_decl_list)

    program           go to state 2
    global_decl_list  go to state 3


State 1

    3 global_decl_list: MK_SEMICOLON .

    $default  reduce using rule 3 (global_decl_list)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: global_decl_list .
    2 global_decl_list: global_decl_list . global_decl

    ID      shift, and go to state 5
    VOID    shift, and go to state 6
    INT     shift, and go to state 7
    FLOAT   shift, and go to state 8
    IF      shift, and go to state 9
    WHILE   shift, and go to state 10
    FOR     shift, and go to state 11
    STRUCT  shift, and go to state 12

    $default  reduce using rule 1 (program)

    global_decl           go to state 13
    function_decl         go to state 14
    function_def          go to state 15
    struct_or_union_decl  go to state 16
    control_flow          go to state 17
    horz_init_list        go to state 18
    derived_id            go to state 19
    id                    go to state 20
    horz_decl_init_list   go to state 21
    function_call         go to state 22
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 26


State 4

    0 $accept: program $end .

    $default  accept


State 5

   58 id: ID .
   59   | ID . array_braces array_braces_list
   60   | ID . blank_array_braces array_braces_list
   83 function_call: ID . MK_LPAREN MK_RPAREN
   84              | ID . MK_LPAREN argument_list MK_RPAREN

    MK_LB      shift, and go to state 27
    MK_LPAREN  shift, and go to state 28

    $default  reduce using rule 58 (id)

    array_braces        go to state 29
    blank_array_braces  go to state 30


State 6

   14 function_decl: VOID . ID MK_LPAREN parameter_list MK_RPAREN
   15              | VOID . ID MK_LPAREN MK_RPAREN
   18 function_def: VOID . ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE
   19             | VOID . ID MK_LPAREN MK_RPAREN MK_LBRACE function_body MK_RBRACE

    ID  shift, and go to state 31


State 7

  101 type: INT .

    $default  reduce using rule 101 (type)


State 8

  102 type: FLOAT .

    $default  reduce using rule 102 (type)


State 9

   39 control_flow: IF . MK_LPAREN control_arguments MK_RPAREN statement
   40             | IF . MK_LPAREN control_arguments MK_RPAREN statement ELSE statement
   41             | IF . MK_LPAREN control_arguments MK_RPAREN statement ELSE MK_LBRACE function_body MK_RBRACE
   42             | IF . MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE
   43             | IF . MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE statement
   44             | IF . MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE MK_LBRACE function_body MK_RBRACE

    MK_LPAREN  shift, and go to state 32


State 10

   37 control_flow: WHILE . MK_LPAREN control_arguments MK_RPAREN statement
   38             | WHILE . MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE

    MK_LPAREN  shift, and go to state 33


State 11

   45 control_flow: FOR . MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN statement
   46             | FOR . MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE

    MK_LPAREN  shift, and go to state 34


State 12

   21 struct_or_union_decl: STRUCT . id MK_LBRACE function_body MK_RBRACE struct_members
   22                     | STRUCT . MK_LBRACE function_body MK_RBRACE struct_members
   23                     | STRUCT . id MK_LBRACE function_body MK_RBRACE
   24                     | STRUCT . MK_LBRACE function_body MK_RBRACE
   25                     | STRUCT . id struct_members

    ID         shift, and go to state 35
    MK_LBRACE  shift, and go to state 36

    id  go to state 37


State 13

    2 global_decl_list: global_decl_list global_decl .

    $default  reduce using rule 2 (global_decl_list)


State 14

    5 global_decl: function_decl . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 38


State 15

    6 global_decl: function_def .

    $default  reduce using rule 6 (global_decl)


State 16

   11 global_decl: struct_or_union_decl . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 39


State 17

   10 global_decl: control_flow .

    $default  reduce using rule 10 (global_decl)


State 18

    8 global_decl: horz_init_list . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 40


State 19

   55 horz_init_list: derived_id . hard_assignment

    OP_ASSIGN  shift, and go to state 41

    hard_assignment  go to state 42


State 20

   56 derived_id: id . MK_DOT id
   57           | id .

    MK_DOT  shift, and go to state 43

    $default  reduce using rule 57 (derived_id)


State 21

    7 global_decl: horz_decl_init_list . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 44


State 22

    9 global_decl: function_call . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 45


State 23

   61 horz_decl_init_list: parameter_decl . assignment more_horz_param_list
   62                    | parameter_decl . assignment

    OP_ASSIGN  shift, and go to state 41

    $default  reduce using rule 66 (assignment)

    assignment       go to state 46
    hard_assignment  go to state 47


State 24

   91 parameter_decl: variable_decl .

    $default  reduce using rule 91 (parameter_decl)


State 25

   92 parameter_decl: array_decl .

    $default  reduce using rule 92 (parameter_decl)


State 26

   12 function_decl: type . ID MK_LPAREN parameter_list MK_RPAREN
   13              | type . ID MK_LPAREN MK_RPAREN
   16 function_def: type . ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE
   17             | type . ID MK_LPAREN MK_RPAREN MK_LBRACE function_body MK_RBRACE
   20             | type . ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE error MK_SEMICOLON
   93 variable_decl: type . ID
   94 array_decl: type . ID array_braces array_braces_list
   95           | type . ID blank_array_braces array_braces_list

    ID  shift, and go to state 48


State 27

   98 array_braces: MK_LB . CONST MK_RB
   99             | MK_LB . ID MK_RB
  100 blank_array_braces: MK_LB . MK_RB

    ID     shift, and go to state 49
    CONST  shift, and go to state 50
    MK_RB  shift, and go to state 51


State 28

   83 function_call: ID MK_LPAREN . MK_RPAREN
   84              | ID MK_LPAREN . argument_list MK_RPAREN

    ID         shift, and go to state 35
    CONST      shift, and go to state 52
    MK_RPAREN  shift, and go to state 53

    id             go to state 54
    argument_list  go to state 55
    argument       go to state 56


State 29

   59 id: ID array_braces . array_braces_list

    $default  reduce using rule 97 (array_braces_list)

    array_braces_list  go to state 57


State 30

   60 id: ID blank_array_braces . array_braces_list

    $default  reduce using rule 97 (array_braces_list)

    array_braces_list  go to state 58


State 31

   14 function_decl: VOID ID . MK_LPAREN parameter_list MK_RPAREN
   15              | VOID ID . MK_LPAREN MK_RPAREN
   18 function_def: VOID ID . MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE
   19             | VOID ID . MK_LPAREN MK_RPAREN MK_LBRACE function_body MK_RBRACE

    MK_LPAREN  shift, and go to state 59


State 32

   39 control_flow: IF MK_LPAREN . control_arguments MK_RPAREN statement
   40             | IF MK_LPAREN . control_arguments MK_RPAREN statement ELSE statement
   41             | IF MK_LPAREN . control_arguments MK_RPAREN statement ELSE MK_LBRACE function_body MK_RBRACE
   42             | IF MK_LPAREN . control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE
   43             | IF MK_LPAREN . control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE statement
   44             | IF MK_LPAREN . control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE MK_LBRACE function_body MK_RBRACE

    ID         shift, and go to state 35
    CONST      shift, and go to state 60
    INT        shift, and go to state 7
    FLOAT      shift, and go to state 8
    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    control_arguments     go to state 75
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 33

   37 control_flow: WHILE MK_LPAREN . control_arguments MK_RPAREN statement
   38             | WHILE MK_LPAREN . control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE

    ID         shift, and go to state 35
    CONST      shift, and go to state 60
    INT        shift, and go to state 7
    FLOAT      shift, and go to state 8
    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    control_arguments     go to state 86
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 34

   45 control_flow: FOR MK_LPAREN . control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN statement
   46             | FOR MK_LPAREN . control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE

    ID         shift, and go to state 35
    CONST      shift, and go to state 60
    INT        shift, and go to state 7
    FLOAT      shift, and go to state 8
    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    control_arguments     go to state 87
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 35

   58 id: ID .
   59   | ID . array_braces array_braces_list
   60   | ID . blank_array_braces array_braces_list

    MK_LB  shift, and go to state 27

    $default  reduce using rule 58 (id)

    array_braces        go to state 29
    blank_array_braces  go to state 30


State 36

   22 struct_or_union_decl: STRUCT MK_LBRACE . function_body MK_RBRACE struct_members
   24                     | STRUCT MK_LBRACE . function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 88
    statement_list  go to state 89


State 37

   21 struct_or_union_decl: STRUCT id . MK_LBRACE function_body MK_RBRACE struct_members
   23                     | STRUCT id . MK_LBRACE function_body MK_RBRACE
   25                     | STRUCT id . struct_members

    ID         shift, and go to state 35
    MK_LBRACE  shift, and go to state 90

    struct_members  go to state 91
    derived_id      go to state 92
    id              go to state 20


State 38

    5 global_decl: function_decl MK_SEMICOLON .

    $default  reduce using rule 5 (global_decl)


State 39

   11 global_decl: struct_or_union_decl MK_SEMICOLON .

    $default  reduce using rule 11 (global_decl)


State 40

    8 global_decl: horz_init_list MK_SEMICOLON .

    $default  reduce using rule 8 (global_decl)


State 41

   67 hard_assignment: OP_ASSIGN . function_call
   68                | OP_ASSIGN . expression_list_list
   69                | OP_ASSIGN . error MK_SEMICOLON

    error      shift, and go to state 93
    ID         shift, and go to state 5
    CONST      shift, and go to state 60
    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    derived_id            go to state 94
    id                    go to state 20
    expression_list_list  go to state 95
    expression_list       go to state 80
    expression            go to state 81
    function_call         go to state 96
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 42

   55 horz_init_list: derived_id hard_assignment .

    $default  reduce using rule 55 (horz_init_list)


State 43

   56 derived_id: id MK_DOT . id

    ID  shift, and go to state 35

    id  go to state 97


State 44

    7 global_decl: horz_decl_init_list MK_SEMICOLON .

    $default  reduce using rule 7 (global_decl)


State 45

    9 global_decl: function_call MK_SEMICOLON .

    $default  reduce using rule 9 (global_decl)


State 46

   61 horz_decl_init_list: parameter_decl assignment . more_horz_param_list
   62                    | parameter_decl assignment .

    MK_COMMA  shift, and go to state 98

    $default  reduce using rule 62 (horz_decl_init_list)

    more_horz_param_list  go to state 99


State 47

   65 assignment: hard_assignment .

    $default  reduce using rule 65 (assignment)


State 48

   12 function_decl: type ID . MK_LPAREN parameter_list MK_RPAREN
   13              | type ID . MK_LPAREN MK_RPAREN
   16 function_def: type ID . MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE
   17             | type ID . MK_LPAREN MK_RPAREN MK_LBRACE function_body MK_RBRACE
   20             | type ID . MK_LPAREN parameter_list MK_RPAREN MK_LBRACE error MK_SEMICOLON
   93 variable_decl: type ID .
   94 array_decl: type ID . array_braces array_braces_list
   95           | type ID . blank_array_braces array_braces_list

    MK_LB      shift, and go to state 27
    MK_LPAREN  shift, and go to state 100

    $default  reduce using rule 93 (variable_decl)

    array_braces        go to state 101
    blank_array_braces  go to state 102


State 49

   99 array_braces: MK_LB ID . MK_RB

    MK_RB  shift, and go to state 103


State 50

   98 array_braces: MK_LB CONST . MK_RB

    MK_RB  shift, and go to state 104


State 51

  100 blank_array_braces: MK_LB MK_RB .

    $default  reduce using rule 100 (blank_array_braces)


State 52

   88 argument: CONST .

    $default  reduce using rule 88 (argument)


State 53

   83 function_call: ID MK_LPAREN MK_RPAREN .

    $default  reduce using rule 83 (function_call)


State 54

   87 argument: id .

    $default  reduce using rule 87 (argument)


State 55

   84 function_call: ID MK_LPAREN argument_list . MK_RPAREN
   86 argument_list: argument_list . MK_COMMA argument

    MK_RPAREN  shift, and go to state 105
    MK_COMMA   shift, and go to state 106


State 56

   85 argument_list: argument .

    $default  reduce using rule 85 (argument_list)


State 57

   59 id: ID array_braces array_braces_list .
   96 array_braces_list: array_braces_list . array_braces

    MK_LB  shift, and go to state 107

    $default  reduce using rule 59 (id)

    array_braces  go to state 108


State 58

   60 id: ID blank_array_braces array_braces_list .
   96 array_braces_list: array_braces_list . array_braces

    MK_LB  shift, and go to state 107

    $default  reduce using rule 60 (id)

    array_braces  go to state 108


State 59

   14 function_decl: VOID ID MK_LPAREN . parameter_list MK_RPAREN
   15              | VOID ID MK_LPAREN . MK_RPAREN
   18 function_def: VOID ID MK_LPAREN . parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE
   19             | VOID ID MK_LPAREN . MK_RPAREN MK_LBRACE function_body MK_RBRACE

    INT        shift, and go to state 7
    FLOAT      shift, and go to state 8
    MK_RPAREN  shift, and go to state 109

    parameter_list  go to state 110
    parameter_decl  go to state 111
    variable_decl   go to state 24
    array_decl      go to state 25
    type            go to state 82


State 60

   70 expression_list_list: CONST .
   71                     | CONST . expression_list

    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    $default  reduce using rule 70 (expression_list_list)

    expression_list   go to state 112
    expression        go to state 81
    sign              go to state 83
    arithmetic_units  go to state 84
    binary_units      go to state 85


State 61

  110 binary_units: OP_OR .

    $default  reduce using rule 110 (binary_units)


State 62

  111 binary_units: OP_AND .

    $default  reduce using rule 111 (binary_units)


State 63

  105 sign: OP_NOT .

    $default  reduce using rule 105 (sign)


State 64

  112 binary_units: OP_EQ .

    $default  reduce using rule 112 (binary_units)


State 65

  113 binary_units: OP_NE .

    $default  reduce using rule 113 (binary_units)


State 66

  115 binary_units: OP_GT .

    $default  reduce using rule 115 (binary_units)


State 67

  114 binary_units: OP_LT .

    $default  reduce using rule 114 (binary_units)


State 68

  117 binary_units: OP_GE .

    $default  reduce using rule 117 (binary_units)


State 69

  116 binary_units: OP_LE .

    $default  reduce using rule 116 (binary_units)


State 70

  103 sign: OP_PLUS .

    $default  reduce using rule 103 (sign)


State 71

  104 sign: OP_MINUS .

    $default  reduce using rule 104 (sign)


State 72

  107 arithmetic_units: OP_TIMES .

    $default  reduce using rule 107 (arithmetic_units)


State 73

  108 arithmetic_units: OP_DIVIDE .

    $default  reduce using rule 108 (arithmetic_units)


State 74

   80 expression: MK_LPAREN . expression_list_list MK_RPAREN

    ID         shift, and go to state 35
    CONST      shift, and go to state 60
    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    derived_id            go to state 94
    id                    go to state 20
    expression_list_list  go to state 113
    expression_list       go to state 80
    expression            go to state 81
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 75

   39 control_flow: IF MK_LPAREN control_arguments . MK_RPAREN statement
   40             | IF MK_LPAREN control_arguments . MK_RPAREN statement ELSE statement
   41             | IF MK_LPAREN control_arguments . MK_RPAREN statement ELSE MK_LBRACE function_body MK_RBRACE
   42             | IF MK_LPAREN control_arguments . MK_RPAREN MK_LBRACE function_body MK_RBRACE
   43             | IF MK_LPAREN control_arguments . MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE statement
   44             | IF MK_LPAREN control_arguments . MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE MK_LBRACE function_body MK_RBRACE

    MK_RPAREN  shift, and go to state 114


State 76

   48 control_arguments: horz_init_list .

    $default  reduce using rule 48 (control_arguments)


State 77

   55 horz_init_list: derived_id . hard_assignment
   72 expression_list_list: derived_id . expression_list
   74                     | derived_id .

    OP_ASSIGN  shift, and go to state 41
    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    $default  reduce using rule 74 (expression_list_list)

    hard_assignment   go to state 42
    expression_list   go to state 115
    expression        go to state 81
    sign              go to state 83
    arithmetic_units  go to state 84
    binary_units      go to state 85


State 78

   49 control_arguments: horz_decl_init_list .

    $default  reduce using rule 49 (control_arguments)


State 79

   47 control_arguments: expression_list_list .

    $default  reduce using rule 47 (control_arguments)


State 80

   73 expression_list_list: expression_list .

    $default  reduce using rule 73 (expression_list_list)


State 81

   75 expression_list: expression . expression_list
   76                | expression .

    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    $default  reduce using rule 76 (expression_list)

    expression_list   go to state 116
    expression        go to state 81
    sign              go to state 83
    arithmetic_units  go to state 84
    binary_units      go to state 85


State 82

   93 variable_decl: type . ID
   94 array_decl: type . ID array_braces array_braces_list
   95           | type . ID blank_array_braces array_braces_list

    ID  shift, and go to state 117


State 83

  106 arithmetic_units: sign .

    $default  reduce using rule 106 (arithmetic_units)


State 84

   77 expression: arithmetic_units . primary
   78           | arithmetic_units .
   79           | arithmetic_units . MK_LPAREN expression_list_list MK_RPAREN

    ID         shift, and go to state 35
    CONST      shift, and go to state 118
    MK_LPAREN  shift, and go to state 119

    $default  reduce using rule 78 (expression)

    id       go to state 120
    primary  go to state 121


State 85

  109 arithmetic_units: binary_units .

    $default  reduce using rule 109 (arithmetic_units)


State 86

   37 control_flow: WHILE MK_LPAREN control_arguments . MK_RPAREN statement
   38             | WHILE MK_LPAREN control_arguments . MK_RPAREN MK_LBRACE function_body MK_RBRACE

    MK_RPAREN  shift, and go to state 122


State 87

   45 control_flow: FOR MK_LPAREN control_arguments . MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN statement
   46             | FOR MK_LPAREN control_arguments . MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE

    MK_SEMICOLON  shift, and go to state 123


State 88

   22 struct_or_union_decl: STRUCT MK_LBRACE function_body . MK_RBRACE struct_members
   24                     | STRUCT MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 124


State 89

   28 function_body: statement_list .
   29 statement_list: statement_list . statement

    ID            shift, and go to state 5
    CONST         shift, and go to state 60
    INT           shift, and go to state 7
    FLOAT         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    STRUCT        shift, and go to state 12
    OP_OR         shift, and go to state 61
    OP_AND        shift, and go to state 62
    OP_NOT        shift, and go to state 63
    OP_EQ         shift, and go to state 64
    OP_NE         shift, and go to state 65
    OP_GT         shift, and go to state 66
    OP_LT         shift, and go to state 67
    OP_GE         shift, and go to state 68
    OP_LE         shift, and go to state 69
    OP_PLUS       shift, and go to state 70
    OP_MINUS      shift, and go to state 71
    OP_TIMES      shift, and go to state 72
    OP_DIVIDE     shift, and go to state 73
    MK_LPAREN     shift, and go to state 74
    MK_SEMICOLON  shift, and go to state 125
    RETURN        shift, and go to state 126

    $default  reduce using rule 28 (function_body)

    struct_or_union_decl  go to state 127
    statement             go to state 128
    control_flow          go to state 129
    control_arguments     go to state 130
    return_statement      go to state 131
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    function_call         go to state 132
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 90

   21 struct_or_union_decl: STRUCT id MK_LBRACE . function_body MK_RBRACE struct_members
   23                     | STRUCT id MK_LBRACE . function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 133
    statement_list  go to state 89


State 91

   25 struct_or_union_decl: STRUCT id struct_members .

    $default  reduce using rule 25 (struct_or_union_decl)


State 92

   26 struct_members: derived_id . MK_COMMA struct_members
   27               | derived_id .

    MK_COMMA  shift, and go to state 134

    $default  reduce using rule 27 (struct_members)


State 93

   69 hard_assignment: OP_ASSIGN error . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 135


State 94

   72 expression_list_list: derived_id . expression_list
   74                     | derived_id .

    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    $default  reduce using rule 74 (expression_list_list)

    expression_list   go to state 115
    expression        go to state 81
    sign              go to state 83
    arithmetic_units  go to state 84
    binary_units      go to state 85


State 95

   68 hard_assignment: OP_ASSIGN expression_list_list .

    $default  reduce using rule 68 (hard_assignment)


State 96

   67 hard_assignment: OP_ASSIGN function_call .

    $default  reduce using rule 67 (hard_assignment)


State 97

   56 derived_id: id MK_DOT id .

    $default  reduce using rule 56 (derived_id)


State 98

   63 more_horz_param_list: MK_COMMA . ID assignment more_horz_param_list
   64                     | MK_COMMA . ID assignment

    ID  shift, and go to state 136


State 99

   61 horz_decl_init_list: parameter_decl assignment more_horz_param_list .

    $default  reduce using rule 61 (horz_decl_init_list)


State 100

   12 function_decl: type ID MK_LPAREN . parameter_list MK_RPAREN
   13              | type ID MK_LPAREN . MK_RPAREN
   16 function_def: type ID MK_LPAREN . parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE
   17             | type ID MK_LPAREN . MK_RPAREN MK_LBRACE function_body MK_RBRACE
   20             | type ID MK_LPAREN . parameter_list MK_RPAREN MK_LBRACE error MK_SEMICOLON

    INT        shift, and go to state 7
    FLOAT      shift, and go to state 8
    MK_RPAREN  shift, and go to state 137

    parameter_list  go to state 138
    parameter_decl  go to state 111
    variable_decl   go to state 24
    array_decl      go to state 25
    type            go to state 82


State 101

   94 array_decl: type ID array_braces . array_braces_list

    $default  reduce using rule 97 (array_braces_list)

    array_braces_list  go to state 139


State 102

   95 array_decl: type ID blank_array_braces . array_braces_list

    $default  reduce using rule 97 (array_braces_list)

    array_braces_list  go to state 140


State 103

   99 array_braces: MK_LB ID MK_RB .

    $default  reduce using rule 99 (array_braces)


State 104

   98 array_braces: MK_LB CONST MK_RB .

    $default  reduce using rule 98 (array_braces)


State 105

   84 function_call: ID MK_LPAREN argument_list MK_RPAREN .

    $default  reduce using rule 84 (function_call)


State 106

   86 argument_list: argument_list MK_COMMA . argument

    ID     shift, and go to state 35
    CONST  shift, and go to state 52

    id        go to state 54
    argument  go to state 141


State 107

   98 array_braces: MK_LB . CONST MK_RB
   99             | MK_LB . ID MK_RB

    ID     shift, and go to state 49
    CONST  shift, and go to state 50


State 108

   96 array_braces_list: array_braces_list array_braces .

    $default  reduce using rule 96 (array_braces_list)


State 109

   15 function_decl: VOID ID MK_LPAREN MK_RPAREN .
   19 function_def: VOID ID MK_LPAREN MK_RPAREN . MK_LBRACE function_body MK_RBRACE

    MK_LBRACE  shift, and go to state 142

    $default  reduce using rule 15 (function_decl)


State 110

   14 function_decl: VOID ID MK_LPAREN parameter_list . MK_RPAREN
   18 function_def: VOID ID MK_LPAREN parameter_list . MK_RPAREN MK_LBRACE function_body MK_RBRACE
   90 parameter_list: parameter_list . MK_COMMA parameter_decl

    MK_RPAREN  shift, and go to state 143
    MK_COMMA   shift, and go to state 144


State 111

   89 parameter_list: parameter_decl .

    $default  reduce using rule 89 (parameter_list)


State 112

   71 expression_list_list: CONST expression_list .

    $default  reduce using rule 71 (expression_list_list)


State 113

   80 expression: MK_LPAREN expression_list_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 145


State 114

   39 control_flow: IF MK_LPAREN control_arguments MK_RPAREN . statement
   40             | IF MK_LPAREN control_arguments MK_RPAREN . statement ELSE statement
   41             | IF MK_LPAREN control_arguments MK_RPAREN . statement ELSE MK_LBRACE function_body MK_RBRACE
   42             | IF MK_LPAREN control_arguments MK_RPAREN . MK_LBRACE function_body MK_RBRACE
   43             | IF MK_LPAREN control_arguments MK_RPAREN . MK_LBRACE function_body MK_RBRACE ELSE statement
   44             | IF MK_LPAREN control_arguments MK_RPAREN . MK_LBRACE function_body MK_RBRACE ELSE MK_LBRACE function_body MK_RBRACE

    ID            shift, and go to state 5
    CONST         shift, and go to state 60
    INT           shift, and go to state 7
    FLOAT         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    STRUCT        shift, and go to state 12
    OP_OR         shift, and go to state 61
    OP_AND        shift, and go to state 62
    OP_NOT        shift, and go to state 63
    OP_EQ         shift, and go to state 64
    OP_NE         shift, and go to state 65
    OP_GT         shift, and go to state 66
    OP_LT         shift, and go to state 67
    OP_GE         shift, and go to state 68
    OP_LE         shift, and go to state 69
    OP_PLUS       shift, and go to state 70
    OP_MINUS      shift, and go to state 71
    OP_TIMES      shift, and go to state 72
    OP_DIVIDE     shift, and go to state 73
    MK_LPAREN     shift, and go to state 74
    MK_LBRACE     shift, and go to state 146
    MK_SEMICOLON  shift, and go to state 125
    RETURN        shift, and go to state 126

    struct_or_union_decl  go to state 127
    statement             go to state 147
    control_flow          go to state 129
    control_arguments     go to state 130
    return_statement      go to state 131
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    function_call         go to state 132
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 115

   72 expression_list_list: derived_id expression_list .

    $default  reduce using rule 72 (expression_list_list)


State 116

   75 expression_list: expression expression_list .

    $default  reduce using rule 75 (expression_list)


State 117

   93 variable_decl: type ID .
   94 array_decl: type ID . array_braces array_braces_list
   95           | type ID . blank_array_braces array_braces_list

    MK_LB  shift, and go to state 27

    $default  reduce using rule 93 (variable_decl)

    array_braces        go to state 101
    blank_array_braces  go to state 102


State 118

   82 primary: CONST .

    $default  reduce using rule 82 (primary)


State 119

   79 expression: arithmetic_units MK_LPAREN . expression_list_list MK_RPAREN

    ID         shift, and go to state 35
    CONST      shift, and go to state 60
    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    derived_id            go to state 94
    id                    go to state 20
    expression_list_list  go to state 148
    expression_list       go to state 80
    expression            go to state 81
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 120

   81 primary: id .

    $default  reduce using rule 81 (primary)


State 121

   77 expression: arithmetic_units primary .

    $default  reduce using rule 77 (expression)


State 122

   37 control_flow: WHILE MK_LPAREN control_arguments MK_RPAREN . statement
   38             | WHILE MK_LPAREN control_arguments MK_RPAREN . MK_LBRACE function_body MK_RBRACE

    ID            shift, and go to state 5
    CONST         shift, and go to state 60
    INT           shift, and go to state 7
    FLOAT         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    STRUCT        shift, and go to state 12
    OP_OR         shift, and go to state 61
    OP_AND        shift, and go to state 62
    OP_NOT        shift, and go to state 63
    OP_EQ         shift, and go to state 64
    OP_NE         shift, and go to state 65
    OP_GT         shift, and go to state 66
    OP_LT         shift, and go to state 67
    OP_GE         shift, and go to state 68
    OP_LE         shift, and go to state 69
    OP_PLUS       shift, and go to state 70
    OP_MINUS      shift, and go to state 71
    OP_TIMES      shift, and go to state 72
    OP_DIVIDE     shift, and go to state 73
    MK_LPAREN     shift, and go to state 74
    MK_LBRACE     shift, and go to state 149
    MK_SEMICOLON  shift, and go to state 125
    RETURN        shift, and go to state 126

    struct_or_union_decl  go to state 127
    statement             go to state 150
    control_flow          go to state 129
    control_arguments     go to state 130
    return_statement      go to state 131
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    function_call         go to state 132
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 123

   45 control_flow: FOR MK_LPAREN control_arguments MK_SEMICOLON . control_arguments MK_SEMICOLON control_arguments MK_RPAREN statement
   46             | FOR MK_LPAREN control_arguments MK_SEMICOLON . control_arguments MK_SEMICOLON control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE

    ID         shift, and go to state 35
    CONST      shift, and go to state 60
    INT        shift, and go to state 7
    FLOAT      shift, and go to state 8
    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    control_arguments     go to state 151
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 124

   22 struct_or_union_decl: STRUCT MK_LBRACE function_body MK_RBRACE . struct_members
   24                     | STRUCT MK_LBRACE function_body MK_RBRACE .

    ID  shift, and go to state 35

    $default  reduce using rule 24 (struct_or_union_decl)

    struct_members  go to state 152
    derived_id      go to state 92
    id              go to state 20


State 125

   36 statement: MK_SEMICOLON .

    $default  reduce using rule 36 (statement)


State 126

   50 return_statement: RETURN . sign CONST
   51                 | RETURN . CONST
   52                 | RETURN . sign id
   53                 | RETURN . id
   54                 | RETURN .

    ID        shift, and go to state 35
    CONST     shift, and go to state 153
    OP_NOT    shift, and go to state 63
    OP_PLUS   shift, and go to state 70
    OP_MINUS  shift, and go to state 71

    $default  reduce using rule 54 (return_statement)

    id    go to state 154
    sign  go to state 155


State 127

   35 statement: struct_or_union_decl . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 156


State 128

   29 statement_list: statement_list statement .

    $default  reduce using rule 29 (statement_list)


State 129

   33 statement: control_flow .

    $default  reduce using rule 33 (statement)


State 130

   34 statement: control_arguments . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 157


State 131

   31 statement: return_statement . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 158


State 132

   32 statement: function_call . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 159


State 133

   21 struct_or_union_decl: STRUCT id MK_LBRACE function_body . MK_RBRACE struct_members
   23                     | STRUCT id MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 160


State 134

   26 struct_members: derived_id MK_COMMA . struct_members

    ID  shift, and go to state 35

    struct_members  go to state 161
    derived_id      go to state 92
    id              go to state 20


State 135

   69 hard_assignment: OP_ASSIGN error MK_SEMICOLON .

    $default  reduce using rule 69 (hard_assignment)


State 136

   63 more_horz_param_list: MK_COMMA ID . assignment more_horz_param_list
   64                     | MK_COMMA ID . assignment

    OP_ASSIGN  shift, and go to state 41

    $default  reduce using rule 66 (assignment)

    assignment       go to state 162
    hard_assignment  go to state 47


State 137

   13 function_decl: type ID MK_LPAREN MK_RPAREN .
   17 function_def: type ID MK_LPAREN MK_RPAREN . MK_LBRACE function_body MK_RBRACE

    MK_LBRACE  shift, and go to state 163

    $default  reduce using rule 13 (function_decl)


State 138

   12 function_decl: type ID MK_LPAREN parameter_list . MK_RPAREN
   16 function_def: type ID MK_LPAREN parameter_list . MK_RPAREN MK_LBRACE function_body MK_RBRACE
   20             | type ID MK_LPAREN parameter_list . MK_RPAREN MK_LBRACE error MK_SEMICOLON
   90 parameter_list: parameter_list . MK_COMMA parameter_decl

    MK_RPAREN  shift, and go to state 164
    MK_COMMA   shift, and go to state 144


State 139

   94 array_decl: type ID array_braces array_braces_list .
   96 array_braces_list: array_braces_list . array_braces

    MK_LB  shift, and go to state 107

    $default  reduce using rule 94 (array_decl)

    array_braces  go to state 108


State 140

   95 array_decl: type ID blank_array_braces array_braces_list .
   96 array_braces_list: array_braces_list . array_braces

    MK_LB  shift, and go to state 107

    $default  reduce using rule 95 (array_decl)

    array_braces  go to state 108


State 141

   86 argument_list: argument_list MK_COMMA argument .

    $default  reduce using rule 86 (argument_list)


State 142

   19 function_def: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE . function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 165
    statement_list  go to state 89


State 143

   14 function_decl: VOID ID MK_LPAREN parameter_list MK_RPAREN .
   18 function_def: VOID ID MK_LPAREN parameter_list MK_RPAREN . MK_LBRACE function_body MK_RBRACE

    MK_LBRACE  shift, and go to state 166

    $default  reduce using rule 14 (function_decl)


State 144

   90 parameter_list: parameter_list MK_COMMA . parameter_decl

    INT    shift, and go to state 7
    FLOAT  shift, and go to state 8

    parameter_decl  go to state 167
    variable_decl   go to state 24
    array_decl      go to state 25
    type            go to state 82


State 145

   80 expression: MK_LPAREN expression_list_list MK_RPAREN .

    $default  reduce using rule 80 (expression)


State 146

   42 control_flow: IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE . function_body MK_RBRACE
   43             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE . function_body MK_RBRACE ELSE statement
   44             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE . function_body MK_RBRACE ELSE MK_LBRACE function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 168
    statement_list  go to state 89


State 147

   39 control_flow: IF MK_LPAREN control_arguments MK_RPAREN statement .
   40             | IF MK_LPAREN control_arguments MK_RPAREN statement . ELSE statement
   41             | IF MK_LPAREN control_arguments MK_RPAREN statement . ELSE MK_LBRACE function_body MK_RBRACE

    ELSE  shift, and go to state 169

    $default  reduce using rule 39 (control_flow)


State 148

   79 expression: arithmetic_units MK_LPAREN expression_list_list . MK_RPAREN

    MK_RPAREN  shift, and go to state 170


State 149

   38 control_flow: WHILE MK_LPAREN control_arguments MK_RPAREN MK_LBRACE . function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 171
    statement_list  go to state 89


State 150

   37 control_flow: WHILE MK_LPAREN control_arguments MK_RPAREN statement .

    $default  reduce using rule 37 (control_flow)


State 151

   45 control_flow: FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments . MK_SEMICOLON control_arguments MK_RPAREN statement
   46             | FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments . MK_SEMICOLON control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE

    MK_SEMICOLON  shift, and go to state 172


State 152

   22 struct_or_union_decl: STRUCT MK_LBRACE function_body MK_RBRACE struct_members .

    $default  reduce using rule 22 (struct_or_union_decl)


State 153

   51 return_statement: RETURN CONST .

    $default  reduce using rule 51 (return_statement)


State 154

   53 return_statement: RETURN id .

    $default  reduce using rule 53 (return_statement)


State 155

   50 return_statement: RETURN sign . CONST
   52                 | RETURN sign . id

    ID     shift, and go to state 35
    CONST  shift, and go to state 173

    id  go to state 174


State 156

   35 statement: struct_or_union_decl MK_SEMICOLON .

    $default  reduce using rule 35 (statement)


State 157

   34 statement: control_arguments MK_SEMICOLON .

    $default  reduce using rule 34 (statement)


State 158

   31 statement: return_statement MK_SEMICOLON .

    $default  reduce using rule 31 (statement)


State 159

   32 statement: function_call MK_SEMICOLON .

    $default  reduce using rule 32 (statement)


State 160

   21 struct_or_union_decl: STRUCT id MK_LBRACE function_body MK_RBRACE . struct_members
   23                     | STRUCT id MK_LBRACE function_body MK_RBRACE .

    ID  shift, and go to state 35

    $default  reduce using rule 23 (struct_or_union_decl)

    struct_members  go to state 175
    derived_id      go to state 92
    id              go to state 20


State 161

   26 struct_members: derived_id MK_COMMA struct_members .

    $default  reduce using rule 26 (struct_members)


State 162

   63 more_horz_param_list: MK_COMMA ID assignment . more_horz_param_list
   64                     | MK_COMMA ID assignment .

    MK_COMMA  shift, and go to state 98

    $default  reduce using rule 64 (more_horz_param_list)

    more_horz_param_list  go to state 176


State 163

   17 function_def: type ID MK_LPAREN MK_RPAREN MK_LBRACE . function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 177
    statement_list  go to state 89


State 164

   12 function_decl: type ID MK_LPAREN parameter_list MK_RPAREN .
   16 function_def: type ID MK_LPAREN parameter_list MK_RPAREN . MK_LBRACE function_body MK_RBRACE
   20             | type ID MK_LPAREN parameter_list MK_RPAREN . MK_LBRACE error MK_SEMICOLON

    MK_LBRACE  shift, and go to state 178

    $default  reduce using rule 12 (function_decl)


State 165

   19 function_def: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 179


State 166

   18 function_def: VOID ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE . function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 180
    statement_list  go to state 89


State 167

   90 parameter_list: parameter_list MK_COMMA parameter_decl .

    $default  reduce using rule 90 (parameter_list)


State 168

   42 control_flow: IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body . MK_RBRACE
   43             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body . MK_RBRACE ELSE statement
   44             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body . MK_RBRACE ELSE MK_LBRACE function_body MK_RBRACE

    MK_RBRACE  shift, and go to state 181


State 169

   40 control_flow: IF MK_LPAREN control_arguments MK_RPAREN statement ELSE . statement
   41             | IF MK_LPAREN control_arguments MK_RPAREN statement ELSE . MK_LBRACE function_body MK_RBRACE

    ID            shift, and go to state 5
    CONST         shift, and go to state 60
    INT           shift, and go to state 7
    FLOAT         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    STRUCT        shift, and go to state 12
    OP_OR         shift, and go to state 61
    OP_AND        shift, and go to state 62
    OP_NOT        shift, and go to state 63
    OP_EQ         shift, and go to state 64
    OP_NE         shift, and go to state 65
    OP_GT         shift, and go to state 66
    OP_LT         shift, and go to state 67
    OP_GE         shift, and go to state 68
    OP_LE         shift, and go to state 69
    OP_PLUS       shift, and go to state 70
    OP_MINUS      shift, and go to state 71
    OP_TIMES      shift, and go to state 72
    OP_DIVIDE     shift, and go to state 73
    MK_LPAREN     shift, and go to state 74
    MK_LBRACE     shift, and go to state 182
    MK_SEMICOLON  shift, and go to state 125
    RETURN        shift, and go to state 126

    struct_or_union_decl  go to state 127
    statement             go to state 183
    control_flow          go to state 129
    control_arguments     go to state 130
    return_statement      go to state 131
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    function_call         go to state 132
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 170

   79 expression: arithmetic_units MK_LPAREN expression_list_list MK_RPAREN .

    $default  reduce using rule 79 (expression)


State 171

   38 control_flow: WHILE MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 184


State 172

   45 control_flow: FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON . control_arguments MK_RPAREN statement
   46             | FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON . control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE

    ID         shift, and go to state 35
    CONST      shift, and go to state 60
    INT        shift, and go to state 7
    FLOAT      shift, and go to state 8
    OP_OR      shift, and go to state 61
    OP_AND     shift, and go to state 62
    OP_NOT     shift, and go to state 63
    OP_EQ      shift, and go to state 64
    OP_NE      shift, and go to state 65
    OP_GT      shift, and go to state 66
    OP_LT      shift, and go to state 67
    OP_GE      shift, and go to state 68
    OP_LE      shift, and go to state 69
    OP_PLUS    shift, and go to state 70
    OP_MINUS   shift, and go to state 71
    OP_TIMES   shift, and go to state 72
    OP_DIVIDE  shift, and go to state 73
    MK_LPAREN  shift, and go to state 74

    control_arguments     go to state 185
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 173

   50 return_statement: RETURN sign CONST .

    $default  reduce using rule 50 (return_statement)


State 174

   52 return_statement: RETURN sign id .

    $default  reduce using rule 52 (return_statement)


State 175

   21 struct_or_union_decl: STRUCT id MK_LBRACE function_body MK_RBRACE struct_members .

    $default  reduce using rule 21 (struct_or_union_decl)


State 176

   63 more_horz_param_list: MK_COMMA ID assignment more_horz_param_list .

    $default  reduce using rule 63 (more_horz_param_list)


State 177

   17 function_def: type ID MK_LPAREN MK_RPAREN MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 186


State 178

   16 function_def: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE . function_body MK_RBRACE
   20             | type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE . error MK_SEMICOLON

    error  shift, and go to state 187

    ID            reduce using rule 30 (statement_list)
    CONST         reduce using rule 30 (statement_list)
    INT           reduce using rule 30 (statement_list)
    FLOAT         reduce using rule 30 (statement_list)
    IF            reduce using rule 30 (statement_list)
    WHILE         reduce using rule 30 (statement_list)
    FOR           reduce using rule 30 (statement_list)
    STRUCT        reduce using rule 30 (statement_list)
    OP_OR         reduce using rule 30 (statement_list)
    OP_AND        reduce using rule 30 (statement_list)
    OP_NOT        reduce using rule 30 (statement_list)
    OP_EQ         reduce using rule 30 (statement_list)
    OP_NE         reduce using rule 30 (statement_list)
    OP_GT         reduce using rule 30 (statement_list)
    OP_LT         reduce using rule 30 (statement_list)
    OP_GE         reduce using rule 30 (statement_list)
    OP_LE         reduce using rule 30 (statement_list)
    OP_PLUS       reduce using rule 30 (statement_list)
    OP_MINUS      reduce using rule 30 (statement_list)
    OP_TIMES      reduce using rule 30 (statement_list)
    OP_DIVIDE     reduce using rule 30 (statement_list)
    MK_LPAREN     reduce using rule 30 (statement_list)
    MK_RBRACE     reduce using rule 30 (statement_list)
    MK_SEMICOLON  reduce using rule 30 (statement_list)
    RETURN        reduce using rule 30 (statement_list)

    function_body   go to state 188
    statement_list  go to state 89


State 179

   19 function_def: VOID ID MK_LPAREN MK_RPAREN MK_LBRACE function_body MK_RBRACE .

    $default  reduce using rule 19 (function_def)


State 180

   18 function_def: VOID ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 189


State 181

   42 control_flow: IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE .
   43             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE . ELSE statement
   44             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE . ELSE MK_LBRACE function_body MK_RBRACE

    ELSE  shift, and go to state 190

    $default  reduce using rule 42 (control_flow)


State 182

   41 control_flow: IF MK_LPAREN control_arguments MK_RPAREN statement ELSE MK_LBRACE . function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 191
    statement_list  go to state 89


State 183

   40 control_flow: IF MK_LPAREN control_arguments MK_RPAREN statement ELSE statement .

    $default  reduce using rule 40 (control_flow)


State 184

   38 control_flow: WHILE MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE .

    $default  reduce using rule 38 (control_flow)


State 185

   45 control_flow: FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments . MK_RPAREN statement
   46             | FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments . MK_RPAREN MK_LBRACE function_body MK_RBRACE

    MK_RPAREN  shift, and go to state 192


State 186

   17 function_def: type ID MK_LPAREN MK_RPAREN MK_LBRACE function_body MK_RBRACE .

    $default  reduce using rule 17 (function_def)


State 187

   20 function_def: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE error . MK_SEMICOLON

    MK_SEMICOLON  shift, and go to state 193


State 188

   16 function_def: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 194


State 189

   18 function_def: VOID ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE .

    $default  reduce using rule 18 (function_def)


State 190

   43 control_flow: IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE . statement
   44             | IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE . MK_LBRACE function_body MK_RBRACE

    ID            shift, and go to state 5
    CONST         shift, and go to state 60
    INT           shift, and go to state 7
    FLOAT         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    STRUCT        shift, and go to state 12
    OP_OR         shift, and go to state 61
    OP_AND        shift, and go to state 62
    OP_NOT        shift, and go to state 63
    OP_EQ         shift, and go to state 64
    OP_NE         shift, and go to state 65
    OP_GT         shift, and go to state 66
    OP_LT         shift, and go to state 67
    OP_GE         shift, and go to state 68
    OP_LE         shift, and go to state 69
    OP_PLUS       shift, and go to state 70
    OP_MINUS      shift, and go to state 71
    OP_TIMES      shift, and go to state 72
    OP_DIVIDE     shift, and go to state 73
    MK_LPAREN     shift, and go to state 74
    MK_LBRACE     shift, and go to state 195
    MK_SEMICOLON  shift, and go to state 125
    RETURN        shift, and go to state 126

    struct_or_union_decl  go to state 127
    statement             go to state 196
    control_flow          go to state 129
    control_arguments     go to state 130
    return_statement      go to state 131
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    function_call         go to state 132
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 191

   41 control_flow: IF MK_LPAREN control_arguments MK_RPAREN statement ELSE MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 197


State 192

   45 control_flow: FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN . statement
   46             | FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN . MK_LBRACE function_body MK_RBRACE

    ID            shift, and go to state 5
    CONST         shift, and go to state 60
    INT           shift, and go to state 7
    FLOAT         shift, and go to state 8
    IF            shift, and go to state 9
    WHILE         shift, and go to state 10
    FOR           shift, and go to state 11
    STRUCT        shift, and go to state 12
    OP_OR         shift, and go to state 61
    OP_AND        shift, and go to state 62
    OP_NOT        shift, and go to state 63
    OP_EQ         shift, and go to state 64
    OP_NE         shift, and go to state 65
    OP_GT         shift, and go to state 66
    OP_LT         shift, and go to state 67
    OP_GE         shift, and go to state 68
    OP_LE         shift, and go to state 69
    OP_PLUS       shift, and go to state 70
    OP_MINUS      shift, and go to state 71
    OP_TIMES      shift, and go to state 72
    OP_DIVIDE     shift, and go to state 73
    MK_LPAREN     shift, and go to state 74
    MK_LBRACE     shift, and go to state 198
    MK_SEMICOLON  shift, and go to state 125
    RETURN        shift, and go to state 126

    struct_or_union_decl  go to state 127
    statement             go to state 199
    control_flow          go to state 129
    control_arguments     go to state 130
    return_statement      go to state 131
    horz_init_list        go to state 76
    derived_id            go to state 77
    id                    go to state 20
    horz_decl_init_list   go to state 78
    expression_list_list  go to state 79
    expression_list       go to state 80
    expression            go to state 81
    function_call         go to state 132
    parameter_decl        go to state 23
    variable_decl         go to state 24
    array_decl            go to state 25
    type                  go to state 82
    sign                  go to state 83
    arithmetic_units      go to state 84
    binary_units          go to state 85


State 193

   20 function_def: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE error MK_SEMICOLON .

    $default  reduce using rule 20 (function_def)


State 194

   16 function_def: type ID MK_LPAREN parameter_list MK_RPAREN MK_LBRACE function_body MK_RBRACE .

    $default  reduce using rule 16 (function_def)


State 195

   44 control_flow: IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE MK_LBRACE . function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 200
    statement_list  go to state 89


State 196

   43 control_flow: IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE statement .

    $default  reduce using rule 43 (control_flow)


State 197

   41 control_flow: IF MK_LPAREN control_arguments MK_RPAREN statement ELSE MK_LBRACE function_body MK_RBRACE .

    $default  reduce using rule 41 (control_flow)


State 198

   46 control_flow: FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN MK_LBRACE . function_body MK_RBRACE

    $default  reduce using rule 30 (statement_list)

    function_body   go to state 201
    statement_list  go to state 89


State 199

   45 control_flow: FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN statement .

    $default  reduce using rule 45 (control_flow)


State 200

   44 control_flow: IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 202


State 201

   46 control_flow: FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN MK_LBRACE function_body . MK_RBRACE

    MK_RBRACE  shift, and go to state 203


State 202

   44 control_flow: IF MK_LPAREN control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE ELSE MK_LBRACE function_body MK_RBRACE .

    $default  reduce using rule 44 (control_flow)


State 203

   46 control_flow: FOR MK_LPAREN control_arguments MK_SEMICOLON control_arguments MK_SEMICOLON control_arguments MK_RPAREN MK_LBRACE function_body MK_RBRACE .

    $default  reduce using rule 46 (control_flow)
